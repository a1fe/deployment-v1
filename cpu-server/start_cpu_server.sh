#!/bin/bash

# =============================================================================
# CPU Server (–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä) - Startup Script
# =============================================================================
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (e2-standard-2)
# –ó–∞–ø—É—Å–∫–∞–µ—Ç API, Redis, PostgreSQL, Celery Beat, CPU-–≤–æ—Ä–∫–µ—Ä—ã
# =============================================================================

set -e

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
source ../common/logging_functions.sh

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
VENV_PATH="$PROJECT_ROOT/venv"
LOGS_DIR="$PROJECT_ROOT/logs"
PIDS_DIR="$PROJECT_ROOT/pids"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$LOGS_DIR" "$PIDS_DIR"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ CPU-–≤–æ—Ä–∫–µ—Ä–æ–≤
start_cpu_workers() {
    log_info "–ó–∞–ø—É—Å–∫ CPU-–≤–æ—Ä–∫–µ—Ä–æ–≤..."
    
    source "$VENV_PATH/bin/activate"
    cd "$PROJECT_ROOT"
    
    # –í–æ—Ä–∫–µ—Ä –¥–ª—è default –æ—á–µ—Ä–µ–¥–∏
    celery -A celery_app.celery_app worker \
        --loglevel=info \
        --concurrency=2 \
        -Q default \
        --logfile="$LOGS_DIR/default_worker.log" \
        --pidfile="$PIDS_DIR/default_worker.pid" \
        --detach
    
    # –í–æ—Ä–∫–µ—Ä –¥–ª—è fillout –æ—á–µ—Ä–µ–¥–∏
    celery -A celery_app.celery_app worker \
        --loglevel=info \
        --concurrency=2 \
        -Q fillout \
        --logfile="$LOGS_DIR/fillout_worker.log" \
        --pidfile="$PIDS_DIR/fillout_worker.pid" \
        --detach
    
    # –í–æ—Ä–∫–µ—Ä –¥–ª—è search_basic –æ—á–µ—Ä–µ–¥–∏
    celery -A celery_app.celery_app worker \
        --loglevel=info \
        --concurrency=2 \
        -Q search_basic \
        --logfile="$LOGS_DIR/search_basic_worker.log" \
        --pidfile="$PIDS_DIR/search_basic_worker.pid" \
        --detach
    
    # –ï—Å–ª–∏ GPU –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º GPU-–∑–∞–¥–∞—á–∏ –Ω–∞ CPU
    if [ -z "$GPU_INSTANCE_NAME" ]; then
        log_info "GPU –æ—Ç–∫–ª—é—á–µ–Ω. –ó–∞–ø—É—Å–∫ GPU-–∑–∞–¥–∞—á –Ω–∞ CPU..."
        
        # –í–æ—Ä–∫–µ—Ä –¥–ª—è embeddings
        celery -A celery_app.celery_app worker \
            --loglevel=info \
            --concurrency=1 \
            -Q embeddings_gpu \
            --logfile="$LOGS_DIR/embeddings_cpu.log" \
            --pidfile="$PIDS_DIR/embeddings_cpu.pid" \
            --detach
        
        # –í–æ—Ä–∫–µ—Ä –¥–ª—è scoring
        celery -A celery_app.celery_app worker \
            --loglevel=info \
            --concurrency=1 \
            -Q scoring_tasks \
            --logfile="$LOGS_DIR/scoring_cpu.log" \
            --pidfile="$PIDS_DIR/scoring_cpu.pid" \
            --detach
    fi
    
    log_success "CPU-–≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Celery Beat
start_celery_beat() {
    log_info "–ó–∞–ø—É—Å–∫ Celery Beat..."
    
    source "$VENV_PATH/bin/activate"
    cd "$PROJECT_ROOT"
    
    celery -A celery_app.celery_app beat \
        --loglevel=info \
        --logfile="$LOGS_DIR/celery_beat.log" \
        --pidfile="$PIDS_DIR/celery_beat.pid" \
        --detach
    
    log_success "Celery Beat –∑–∞–ø—É—â–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU
start_gpu_monitor() {
    if [ -n "$GPU_INSTANCE_NAME" ]; then
        log_info "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU..."
        
        source "$VENV_PATH/bin/activate"
        cd "$PROJECT_ROOT"
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        cat > "$SCRIPT_DIR/gpu_monitor_daemon.py" << 'EOF'
#!/usr/bin/env python3
import sys
import time
import logging
import signal
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/opt/hr-analysis/deployment')

from common.gpu_task_monitor import gpu_monitor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def signal_handler(signum, frame):
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    gpu_monitor.stop_monitoring()
    sys.exit(0)

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    try:
        gpu_monitor.start_monitoring()
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        gpu_monitor.stop_monitoring()
EOF
        
        chmod +x "$SCRIPT_DIR/gpu_monitor_daemon.py"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        nohup python3 "$SCRIPT_DIR/gpu_monitor_daemon.py" \
            > "$LOGS_DIR/gpu_monitor.log" 2>&1 &
        echo $! > "$PIDS_DIR/gpu_monitor.pid"
        
        log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –∑–∞–ø—É—â–µ–Ω"
    else
        log_info "GPU –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω."
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
main() {
    log_info "=== –ó–∞–ø—É—Å–∫ CPU Server (–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä) ==="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ ! -f "$VENV_PATH/bin/activate" ]; then
        log_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: $VENV_PATH"
        exit 1
    fi
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f "$PROJECT_ROOT/.env" ]; then
        source "$PROJECT_ROOT/.env"
        log_info "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    else
        log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    start_cpu_workers
    start_celery_beat
    start_gpu_monitor
    
    log_success "=== CPU Server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω ==="
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    echo ""
    echo "üìã –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤:"
    pgrep -f "celery.*worker" | wc -l | xargs echo "  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤:"
    
    echo ""
    echo "üìÇ –õ–æ–≥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: $LOGS_DIR"
    echo "üîß PID —Ñ–∞–π–ª—ã –≤: $PIDS_DIR"
    echo ""
    echo "üí° –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "   ./start_flower.sh  # http://localhost:5555"
    echo ""
}

# –ó–∞–ø—É—Å–∫
main "$@"
