#!/bin/bash
# –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ CPU —Å–µ—Ä–≤–µ—Ä–∞ HR Analysis
# –í–∫–ª—é—á–∞–µ—Ç: PostgreSQL, Redis, Flower, Celery workers, Beat

set -e

DEPLOYMENT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMMON_DIR="${DEPLOYMENT_ROOT}/common"
LOG_DIR="${COMMON_DIR}/logs"
PID_DIR="${COMMON_DIR}/pids"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "${LOG_DIR}" "${PID_DIR}"

echo "üñ•Ô∏è  –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ CPU —Å–µ—Ä–≤–µ—Ä–∞ HR Analysis"
echo "==========================================="

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
source "${COMMON_DIR}/logging_functions.sh" 2>/dev/null || {
    log_info() { echo "[$(date '+%H:%M:%S')] $1"; }
    log_success() { echo "[$(date '+%H:%M:%S')] ‚úÖ $1"; }
    log_error() { echo "[$(date '+%H:%M:%S')] ‚ùå $1" >&2; }
    log_warning() { echo "[$(date '+%H:%M:%S')] ‚ö†Ô∏è $1"; }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
cleanup() {
    log_info "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º stop_all –∏–∑ start_celery.sh
    cd "${COMMON_DIR}"
    ./start_celery.sh stop
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Flower
    if [ -f "${PID_DIR}/flower.pid" ]; then
        kill $(cat "${PID_DIR}/flower.pid") 2>/dev/null || true
        rm -f "${PID_DIR}/flower.pid"
    fi
    
    log_info "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    exit 0
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap cleanup SIGINT SIGTERM

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [[ "$VIRTUAL_ENV" == "" ]]; then
    log_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!"
    log_info "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: source venv/bin/activate"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd "${COMMON_DIR}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f ".env" ]; then
    log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    log_info "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example"
    exit 1
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
set -a  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
source .env
set +a

log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

# –≠–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
export PYTHONPATH="${PYTHONPATH}:${COMMON_DIR}:${DEPLOYMENT_ROOT}"
export SERVER_TYPE="cpu"
export IS_GPU_SERVER="false"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
CONCURRENCY="10"  # 2*5 –≤–æ—Ä–∫–µ—Ä–æ–≤ (fillout_processing, text_processing, embeddings, reranking, orchestration)
QUEUES="fillout_processing,text_processing,embeddings,reranking,orchestration"
WORKER_LOG="${LOG_DIR}/celery_workers.log"
BEAT_LOG="${LOG_DIR}/celery_beat.log"

log_info "üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${COMMON_DIR}"
log_info "üîß PYTHONPATH: ${PYTHONPATH}"
log_info "üíª –¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: CPU"

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø POSTGRESQL ==========
log_info "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
if ! pg_isready -h "${DB_HOST:-localhost}" -p "${DB_PORT:-5432}" >/dev/null 2>&1; then
    log_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ${DB_HOST:-localhost}:${DB_PORT:-5432}"
    log_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω"
    exit 1
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Python —Å–∫—Ä–∏–ø—Ç
log_info "–ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if [ -f "database/init/init_database.py" ]; then
    if python database/init/init_database.py; then
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –≤—Ä—É—á–Ω—É—é:"
        log_info "  python database/init/init_database.py"
        exit 1
    fi
else
    log_error "–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: database/init/init_database.py"
    log_info "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    log_info "–°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ë–î –≤—Ä—É—á–Ω—É—é"
    exit 1
fi

# ========== –ü–†–û–í–ï–†–ö–ê REDIS ==========
log_info "üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."

if ! redis-cli -h "${REDIS_HOST:-localhost}" -p "${REDIS_PORT:-6379}" ping >/dev/null 2>&1; then
    log_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}"
    log_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω"
    exit 1
fi

log_success "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"

# ========== –ó–ê–ü–£–°–ö FLOWER ==========
log_info "üå∏ –ó–∞–ø—É—Å–∫ Flower –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."

FLOWER_PORT="${FLOWER_PORT:-5555}"
FLOWER_LOG="${LOG_DIR}/flower.log"

nohup celery -A celery_app.celery_app flower \
    --port="${FLOWER_PORT}" \
    --broker="redis://${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}/${REDIS_DB:-0}" \
    --logging=info \
    > "${FLOWER_LOG}" 2>&1 &

FLOWER_PID=$!
echo $FLOWER_PID > "${PID_DIR}/flower.pid"

log_success "Flower –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${FLOWER_PORT} (PID: ${FLOWER_PID})"
log_info "Flower –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${FLOWER_PORT}"

# ========== –ó–ê–ü–£–°–ö CELERY WORKERS –ò BEAT ==========
log_info "üë∑ –ó–∞–ø—É—Å–∫ Celery Workers –∏ Beat..."

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π start_celery.sh —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—á–µ—Ä–µ–¥—è–º–∏
# –û–Ω —Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤, –∏ beat
cd "${COMMON_DIR}"
./start_celery.sh --server-type=cpu start

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
sleep 2
./start_celery.sh status

# ========== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ==========
log_info "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."

sleep 3  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Flower
if curl -s "http://localhost:${FLOWER_PORT}" >/dev/null 2>&1; then
    log_success "Flower —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    log_warning "Flower –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery Workers
if celery -A celery_app.celery_app inspect active >/dev/null 2>&1; then
    log_success "Celery Workers –∞–∫—Ç–∏–≤–Ω—ã"
else
    log_warning "Celery Workers –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã"
fi

# ========== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ü–£–°–ö–ï ==========
echo ""
log_success "üéâ CPU —Å–µ—Ä–≤–µ—Ä HR Analysis —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
echo ""
echo "ÔøΩ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "  ‚Ä¢ PostgreSQL: ${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME}"
echo "  ‚Ä¢ Redis:      ${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}"
echo "  ‚Ä¢ Flower:     http://localhost:${FLOWER_PORT}"
echo "  ‚Ä¢ Celery:     ${CONCURRENCY} –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –æ—á–µ—Ä–µ–¥—è—Ö [${QUEUES}]"
echo ""
echo "üìÅ –õ–æ–≥–∏:"
echo "  ‚Ä¢ Flower:     ${FLOWER_LOG}"
echo "  ‚Ä¢ Beat:       ${BEAT_LOG}" 
echo "  ‚Ä¢ Workers:    ${WORKER_LOG}"
echo ""
echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: tail -f ${LOG_DIR}/*.log"
echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞:     Ctrl+C –∏–ª–∏ kill -TERM $$"
echo ""

# ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ó–ê–î–ê–ß ==========
log_info "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö..."

# –ñ–¥–µ–º, —á—Ç–æ–±—ã –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
sleep 5

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
cd "${COMMON_DIR}"
python -c "
import sys
sys.path.append('.')
from celery_app.celery_app import app

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π workflow –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
result = app.send_task('tasks.workflows.run_full_processing_pipeline')
print(f'‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result.id}')
print(f'üåê –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Flower: http://localhost:5555/task/{result.id}')
"

log_success "üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã!"
echo ""

# ========== –ú–û–ù–ò–¢–û–†–ò–ù–ì ==========
log_info "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)"

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
while true; do
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if [ -f "${PID_DIR}/flower.pid" ]; then
        if ! kill -0 $(cat "${PID_DIR}/flower.pid") 2>/dev/null; then
            log_warning "Flower –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥—è–º
    for queue in fillout_processing text_processing embeddings reranking orchestration; do
        if [ -f "${PID_DIR}/celery_${queue}.pid" ]; then
            if ! kill -0 $(cat "${PID_DIR}/celery_${queue}.pid") 2>/dev/null; then
                log_warning "Celery Worker ${queue} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"
            fi
        fi
    done
    
    if [ -f "${PID_DIR}/celery_beat.pid" ]; then
        if ! kill -0 $(cat "${PID_DIR}/celery_beat.pid") 2>/dev/null; then
            log_warning "Celery Beat –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"
        fi
    fi
done
