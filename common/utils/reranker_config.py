"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è BGE Reranker –º–æ–¥–µ–ª–∏

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏ —Ä–µ–∑—é–º–µ
"""

import os
import logging
from typing import Optional, List, Tuple
from FlagEmbedding import FlagReranker

logger = logging.getLogger(__name__)


class RerankerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è BGE Reranker"""
    
    # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (BGE-M3 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π —Ç–æ–∫–µ–Ω–æ–≤)
    DEFAULT_MODEL = "BAAI/bge-reranker-v2-m3"
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
    ALTERNATIVE_MODELS = [
        "BAAI/bge-reranker-large",
        "BAAI/bge-reranker-base",
        "ms-marco-MiniLM-L-6-v2"
    ]
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è BGE-M3 (8192 —Ç–æ–∫–µ–Ω–∞ ‚âà 32,000-35,000 —Å–∏–º–≤–æ–ª–æ–≤)
    MAX_TOKEN_LENGTH = 8192
    MAX_CHAR_LENGTH = 32000  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    
    # –†–∞–∑–º–µ—Ä batch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    BATCH_SIZE = 8
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    MIN_RERANK_SCORE = -10.0  # BGE reranker –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è


class RerankerClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å BGE Reranker"""
    
    def __init__(self, model_name: str = RerankerConfig.DEFAULT_MODEL):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ reranker
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è reranking
        """
        self.model_name = model_name
        self._reranker: Optional[FlagReranker] = None
        self._initialized = False
    
    def _initialize_reranker(self) -> bool:
        """
        –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è reranker –º–æ–¥–µ–ª–∏
        
        Returns:
            True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        """
        if self._initialized:
            return True
        
        try:
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ BGE Reranker –º–æ–¥–µ–ª–∏: {self.model_name}")
            self._reranker = FlagReranker(
                self.model_name,
                use_fp16=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FP16 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            )
            self._initialized = True
            logger.info(f"‚úÖ BGE Reranker –º–æ–¥–µ–ª—å {self.model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BGE Reranker –º–æ–¥–µ–ª–∏ {self.model_name}: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
            for alt_model in RerankerConfig.ALTERNATIVE_MODELS:
                if alt_model != self.model_name:
                    try:
                        logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å: {alt_model}")
                        self._reranker = FlagReranker(alt_model, use_fp16=True)
                        self.model_name = alt_model
                        self._initialized = True
                        logger.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å {alt_model} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                        return True
                    except Exception as alt_e:
                        logger.warning(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å {alt_model} —Ç–∞–∫–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å: {alt_e}")
                        continue
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω—É reranker –º–æ–¥–µ–ª—å")
            return False
    
    def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ reranker
        
        Returns:
            True –µ—Å–ª–∏ reranker –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        return self._initialize_reranker()
    
    def rerank_texts(self, query: str, texts: List[str]) -> List[Tuple[int, float]]:
        """
        –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å (–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Ä–µ–∑—é–º–µ)
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å, score) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
        """
        if not self._initialize_reranker():
            logger.error("‚ùå Reranker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        if not texts:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è reranking")
            return []
        
        try:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã (BGE-M3 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 8192 —Ç–æ–∫–µ–Ω–æ–≤)
            truncated_query = query[:RerankerConfig.MAX_CHAR_LENGTH]
            truncated_texts = [text[:RerankerConfig.MAX_CHAR_LENGTH] for text in texts]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è reranking (–∫–æ—Ä—Ç–µ–∂–∏ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–≤)
            pairs = [(truncated_query, text) for text in truncated_texts]
            
            logger.info(f"üîç Reranking {len(pairs)} —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é {self.model_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º scores
            if self._reranker is None:
                logger.error("‚ùå Reranker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            scores = self._reranker.compute_score(pairs)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ scores
            if scores is None:
                logger.warning("‚ö†Ô∏è Reranker –≤–µ—Ä–Ω—É–ª None scores")
                return []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ float
            if hasattr(scores, '__iter__') and not isinstance(scores, str):
                # scores —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å–ø–∏—Å–æ–∫
                try:
                    scores_list = [float(score) for score in scores]
                except (ValueError, TypeError):
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å scores –≤ float")
                    return []
            else:
                # scores —ç—Ç–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                try:
                    scores_list = [float(scores)]
                except (ValueError, TypeError):
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å score –≤ float")
                    return []
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ (–∏–Ω–¥–µ–∫—Å, score) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
            indexed_scores = [(i, score) for i, score in enumerate(scores_list)]
            indexed_scores.sort(key=lambda x: x[1], reverse=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É score
            filtered_scores = [
                (idx, score) for idx, score in indexed_scores 
                if score >= RerankerConfig.MIN_RERANK_SCORE
            ]
            
            logger.info(f"üìä Reranking –∑–∞–≤–µ—Ä—à–µ–Ω: {len(filtered_scores)}/{len(texts)} —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä")
            return filtered_scores
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ reranking: {e}")
            return []
    
    def rerank_matches(self, query: str, matches: List[dict]) -> List[dict]:
        """
        –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º rerank_score
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å (–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏)
            matches: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø–æ–ª–µ–º 'snippet' –∏–ª–∏ 'document'
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º rerank_score, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ rerank_score
        """
        if not matches:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è reranking
        texts = []
        for match in matches:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º
            text = match.get('snippet') or match.get('document') or match.get('text') or ''
            texts.append(text)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º reranking
        reranked_results = self.rerank_texts(query, texts)
        
        if not reranked_results:
            logger.warning("‚ö†Ô∏è Reranking –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return matches
        
        # –û–±–Ω–æ–≤–ª—è–µ–º matches —Å rerank_score
        updated_matches = []
        for idx, rerank_score in reranked_results:
            if idx < len(matches):
                match = matches[idx].copy()
                match['rerank_score'] = round(rerank_score, 4)
                updated_matches.append(match)
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω rerank_score –∫ {len(updated_matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º")
        return updated_matches
    
    def rerank_from_chroma_embeddings(self, query_embedding: List[float], 
                                     candidate_embeddings: List[List[float]], 
                                     candidate_texts: Optional[List[str]] = None) -> List[Tuple[int, float]]:
        """
        –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ ChromaDB
        
        Args:
            query_embedding: –≠–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ (–≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Ä–µ–∑—é–º–µ)
            candidate_embeddings: –°–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidate_texts: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å, score) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
        """
        if not self._initialize_reranker():
            logger.error("‚ùå Reranker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        if not candidate_embeddings:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è reranking")
            return []
        
        try:
            # BGE-M3 –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å —Ç–µ–∫—Å—Ç–æ–º, —Ç–∞–∫ –∏ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ
            if candidate_texts and len(candidate_texts) == len(candidate_embeddings):
                logger.info(f"üîç Reranking {len(candidate_texts)} —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é BGE-M3")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ BGE-M3 –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∞—Ä–∞–º–∏ —Ç–µ–∫—Å—Ç-—Ç–µ–∫—Å—Ç
                query_text = "Search query based on embeddings"
                
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
                truncated_texts = [text[:RerankerConfig.MAX_CHAR_LENGTH] if text else "" 
                                  for text in candidate_texts]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è reranking
                pairs = [(query_text, text) for text in truncated_texts]
                
                # –ü–æ–ª—É—á–∞–µ–º scores —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                if self._reranker is None:
                    logger.error("‚ùå Reranker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è BGE-M3")
                    return []
                
                scores = self._reranker.compute_score(pairs)
                
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É query_embedding –∏ candidate_embeddings
                logger.info(f"üîç Reranking {len(candidate_embeddings)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ")
                
                import numpy as np
                from sklearn.metrics.pairwise import cosine_similarity
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤—ã
                query_array = np.array(query_embedding).reshape(1, -1)
                candidates_array = np.array(candidate_embeddings)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                similarities = cosine_similarity(query_array, candidates_array)[0]
                scores = similarities.tolist()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ scores
            if scores is None:
                logger.warning("‚ö†Ô∏è Reranker –≤–µ—Ä–Ω—É–ª None scores")
                return []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ float
            if hasattr(scores, '__iter__') and not isinstance(scores, str):
                # scores —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å–ø–∏—Å–æ–∫
                try:
                    scores_list = [float(score) for score in scores]
                except (ValueError, TypeError):
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å scores –≤ float")
                    return []
            else:
                # scores —ç—Ç–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                try:
                    scores_list = [float(scores)]
                except (ValueError, TypeError):
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å score –≤ float")
                    return []
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ (–∏–Ω–¥–µ–∫—Å, score) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
            indexed_scores = [(i, score) for i, score in enumerate(scores_list)]
            indexed_scores.sort(key=lambda x: x[1], reverse=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É score
            filtered_scores = [
                (idx, score) for idx, score in indexed_scores 
                if score >= RerankerConfig.MIN_RERANK_SCORE
            ]
            
            logger.info(f"üìä Reranking –∑–∞–≤–µ—Ä—à–µ–Ω: {len(filtered_scores)}/{len(candidate_embeddings)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä")
            return filtered_scores
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ reranking —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return []

    def rerank_chroma_matches(self, job_embedding: List[float], 
                             resume_matches: List[dict]) -> List[dict]:
        """
        –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑ ChromaDB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        
        Args:
            job_embedding: –≠–º–±–µ–¥–¥–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏
            resume_matches: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ ChromaDB —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º rerank_score
        """
        if not resume_matches:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ —Ç–µ–∫—Å—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ChromaDB
        candidate_embeddings = []
        candidate_texts = []
        
        for match in resume_matches:
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            embedding = match.get('embedding') or match.get('vector')
            if embedding:
                candidate_embeddings.append(embedding)
            else:
                # –ï—Å–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
                # (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ ChromaDB, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                candidate_embeddings.append([0.0] * len(job_embedding))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            text = match.get('snippet') or match.get('document') or match.get('text') or ''
            candidate_texts.append(text)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º reranking
        reranked_results = self.rerank_from_chroma_embeddings(
            job_embedding, 
            candidate_embeddings, 
            candidate_texts
        )
        
        if not reranked_results:
            logger.warning("‚ö†Ô∏è Reranking –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return resume_matches
        
        # –û–±–Ω–æ–≤–ª—è–µ–º matches —Å rerank_score
        updated_matches = []
        for idx, rerank_score in reranked_results:
            if idx < len(resume_matches):
                match = resume_matches[idx].copy()
                match['rerank_score'] = round(rerank_score, 4)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—à–µ–ª reranking
                match['reranked_with_bge_m3'] = True
                updated_matches.append(match)
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω rerank_score –∫ {len(updated_matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ BGE-M3")
        return updated_matches


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
reranker_client = RerankerClient()


def get_reranker_client() -> RerankerClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä reranker –∫–ª–∏–µ–Ω—Ç–∞"""
    return reranker_client
