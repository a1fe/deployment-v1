"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è Celery –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –∞–ª–µ—Ä—Ç–∞–º–∏
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤, –æ—á–µ—Ä–µ–¥–µ–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import asyncio
import json
import time
import logging
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from pathlib import Path
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from celery import Celery
from deployment.common.utils.logging_config import get_logger
from deployment.common.utils.secret_manager import get_secret

logger = get_logger('worker_monitor')


@dataclass
class WorkerStatus:
    """–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞"""
    name: str
    hostname: str
    queues: List[str]
    active_tasks: int
    processed_tasks: int
    load_avg: List[float]
    last_heartbeat: datetime
    is_alive: bool
    memory_usage: Optional[float] = None
    cpu_usage: Optional[float] = None


@dataclass
class QueueStatus:
    """–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
    name: str
    pending_tasks: int
    active_tasks: int
    completed_tasks: int
    failed_tasks: int
    avg_processing_time: float
    workers_count: int


@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    type: str
    severity: str  # 'low', 'medium', 'high', 'critical'
    message: str
    timestamp: datetime
    component: str
    details: Dict[str, Any]


class WorkerHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    
    def __init__(self, celery_app: Optional[Celery] = None):
        self.celery_app = celery_app or self._get_celery_app()
        self.alerts: List[Alert] = []
        self.last_check_time = datetime.now()
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.alert_thresholds = self._load_alert_thresholds()
        self.email_config = self._load_email_config()
        
    def _get_celery_app(self) -> Celery:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            from deployment.common.celery_app.celery_app import get_celery_app
            return get_celery_app()
        except ImportError:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            raise
    
    def _load_alert_thresholds(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        return {
            'worker_down_timeout': 60,  # —Å–µ–∫—É–Ω–¥ –±–µ–∑ heartbeat
            'high_queue_threshold': 100,  # –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
            'critical_queue_threshold': 500,
            'memory_threshold': 85,  # –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            'cpu_threshold': 90,  # –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
            'processing_time_threshold': 300,  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–¥–∞—á—É
            'failed_tasks_threshold': 10,  # –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
        }
    
    def _load_email_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ email –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        recipients_str = get_secret('ALERT_RECIPIENTS', '') or ''
        return {
            'smtp_server': get_secret('SMTP_SERVER', 'smtp.gmail.com') or 'smtp.gmail.com',
            'smtp_port': get_secret('SMTP_PORT', '587') or '587',
            'smtp_username': get_secret('SMTP_USERNAME', '') or '',
            'smtp_password': get_secret('SMTP_PASSWORD', '') or '',
            'alert_recipients': [r.strip() for r in recipients_str.split(',') if r.strip()],
            'from_email': get_secret('ALERT_FROM_EMAIL', '') or '',
        }
    
    async def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤...")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
                workers_status = await self.check_workers_health()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
                queues_status = await self.check_queues_health()
                
                # –ê–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
                await self.analyze_and_alert(workers_status, queues_status)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                await self.save_metrics(workers_status, queues_status)
                
                self.last_check_time = datetime.now()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–∞–º–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                await self.create_alert(
                    'monitor_error',
                    'high',
                    f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}",
                    'monitor',
                    {'error': str(e)}
                )
            
            await asyncio.sleep(self.check_interval)
    
    async def check_workers_health(self) -> List[WorkerStatus]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        workers_status = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö
            inspect = self.celery_app.control.inspect()
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
            active_workers = inspect.active() or {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
            stats = inspect.stats() or {}
            
            # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
            registered = inspect.registered() or {}
            
            current_time = datetime.now()
            
            for worker_name, worker_stats in stats.items():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ
                hostname = worker_stats.get('hostname', worker_name)
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                active_tasks = len(active_workers.get(worker_name, []))
                
                # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                processed_tasks = worker_stats.get('total', {}).get('tasks.processed', 0)
                
                # Load average
                load_avg = worker_stats.get('rusage', {}).get('load_avg', [0, 0, 0])
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat
                last_heartbeat = current_time  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                
                # –û—á–µ—Ä–µ–¥–∏ –≤–æ—Ä–∫–µ—Ä–∞
                worker_queues = []
                if worker_name in registered:
                    for task_name, task_info in registered[worker_name].items():
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥—è—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        pass
                
                # –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞
                worker_status = WorkerStatus(
                    name=worker_name,
                    hostname=hostname,
                    queues=worker_queues,
                    active_tasks=active_tasks,
                    processed_tasks=processed_tasks,
                    load_avg=load_avg,
                    last_heartbeat=last_heartbeat,
                    is_alive=True,
                )
                
                workers_status.append(worker_status)
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(workers_status)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ—Ä–∫–µ—Ä–æ–≤: {e}")
        
        return workers_status
    
    async def check_queues_health(self) -> List[QueueStatus]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–µ–π"""
        queues_status = []
        
        try:
            inspect = self.celery_app.control.inspect()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥—è—Ö
            active_queues = inspect.active_queues() or {}
            reserved_tasks = inspect.reserved() or {}
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
            all_queues = set()
            for worker_queues in active_queues.values():
                for queue_info in worker_queues:
                    all_queues.add(queue_info['name'])
            
            for queue_name in all_queues:
                # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
                pending_tasks = 0
                active_tasks = 0
                workers_count = 0
                
                for worker_name, worker_queues in active_queues.items():
                    for queue_info in worker_queues:
                        if queue_info['name'] == queue_name:
                            workers_count += 1
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á
                
                # –î–ª—è Redis broker –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É –æ—á–µ—Ä–µ–¥–∏
                try:
                    with self.celery_app.connection() as connection:
                        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
                        pass
                except:
                    pass
                
                queue_status = QueueStatus(
                    name=queue_name,
                    pending_tasks=pending_tasks,
                    active_tasks=active_tasks,
                    completed_tasks=0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
                    failed_tasks=0,     # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
                    avg_processing_time=0.0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
                    workers_count=workers_count
                )
                
                queues_status.append(queue_status)
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(queues_status)} –æ—á–µ—Ä–µ–¥–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
        
        return queues_status
    
    async def analyze_and_alert(self, workers: List[WorkerStatus], queues: List[QueueStatus]):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
        for worker in workers:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä–∞
            time_since_heartbeat = (current_time - worker.last_heartbeat).total_seconds()
            if time_since_heartbeat > self.alert_thresholds['worker_down_timeout']:
                await self.create_alert(
                    'worker_down',
                    'critical',
                    f"–í–æ—Ä–∫–µ—Ä {worker.name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç {time_since_heartbeat:.1f} —Å–µ–∫—É–Ω–¥",
                    worker.name,
                    {'last_heartbeat': worker.last_heartbeat.isoformat()}
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            if worker.memory_usage and worker.memory_usage > self.alert_thresholds['memory_threshold']:
                await self.create_alert(
                    'high_memory',
                    'medium',
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤–æ—Ä–∫–µ—Ä–æ–º {worker.name}: {worker.memory_usage:.1f}%",
                    worker.name,
                    {'memory_usage': worker.memory_usage}
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
            if worker.cpu_usage and worker.cpu_usage > self.alert_thresholds['cpu_threshold']:
                await self.create_alert(
                    'high_cpu',
                    'medium',
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤–æ—Ä–∫–µ—Ä–æ–º {worker.name}: {worker.cpu_usage:.1f}%",
                    worker.name,
                    {'cpu_usage': worker.cpu_usage}
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
        for queue in queues:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
            if queue.pending_tasks > self.alert_thresholds['critical_queue_threshold']:
                await self.create_alert(
                    'queue_overflow',
                    'critical',
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ {queue.name}: {queue.pending_tasks} –∑–∞–¥–∞—á",
                    queue.name,
                    {'pending_tasks': queue.pending_tasks}
                )
            elif queue.pending_tasks > self.alert_thresholds['high_queue_threshold']:
                await self.create_alert(
                    'queue_high',
                    'medium',
                    f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ {queue.name}: {queue.pending_tasks} –∑–∞–¥–∞—á",
                    queue.name,
                    {'pending_tasks': queue.pending_tasks}
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            if queue.workers_count == 0 and queue.pending_tasks > 0:
                await self.create_alert(
                    'no_workers',
                    'high',
                    f"–ù–µ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue.name} —Å {queue.pending_tasks} –∑–∞–¥–∞—á–∞–º–∏",
                    queue.name,
                    {'pending_tasks': queue.pending_tasks}
                )
    
    async def create_alert(self, alert_type: str, severity: str, message: str, component: str, details: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert = Alert(
            type=alert_type,
            severity=severity,
            message=message,
            timestamp=datetime.now(),
            component=component,
            details=details
        )
        
        self.alerts.append(alert)
        logger.warning(f"üö® –ê–ª–µ—Ä—Ç [{severity.upper()}] {alert_type}: {message}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if severity in ['high', 'critical']:
            await self.send_alert_notification(alert)
    
    async def send_alert_notification(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ"""
        try:
            if not self.email_config['smtp_username'] or not self.email_config['alert_recipients']:
                logger.warning("‚ö†Ô∏è Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–∞")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º email
            subject = f"[HR Analysis] –ê–ª–µ—Ä—Ç {alert.severity.upper()}: {alert.type}"
            
            body = f"""
–í—Ä–µ–º—è: {alert.timestamp.isoformat()}
–¢–∏–ø: {alert.type}
–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {alert.severity.upper()}
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {alert.component}
–°–æ–æ–±—â–µ–Ω–∏–µ: {alert.message}

–î–µ—Ç–∞–ª–∏:
{json.dumps(alert.details, indent=2, ensure_ascii=False)}

---
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HR Analysis
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            msg = MIMEMultipart()
            msg['From'] = self.email_config['from_email'] or self.email_config['smtp_username']
            msg['To'] = ', '.join(self.email_config['alert_recipients'])
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            with smtplib.SMTP(self.email_config['smtp_server'], int(self.email_config['smtp_port'])) as server:
                server.starttls()
                server.login(self.email_config['smtp_username'], self.email_config['smtp_password'])
                server.send_message(msg)
            
            logger.info(f"üìß –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {len(self.email_config['alert_recipients'])} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def save_metrics(self, workers: List[WorkerStatus], queues: List[QueueStatus]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            metrics_dir = Path('./logs/metrics')
            metrics_dir.mkdir(parents=True, exist_ok=True)
            
            timestamp = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
            workers_data = {
                'timestamp': timestamp,
                'workers': [asdict(worker) for worker in workers]
            }
            
            with open(metrics_dir / f'workers_{datetime.now().strftime("%Y%m%d")}.jsonl', 'a') as f:
                f.write(json.dumps(workers_data, ensure_ascii=False, default=str) + '\n')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
            queues_data = {
                'timestamp': timestamp,
                'queues': [asdict(queue) for queue in queues]
            }
            
            with open(metrics_dir / f'queues_{datetime.now().strftime("%Y%m%d")}.jsonl', 'a') as f:
                f.write(json.dumps(queues_data, ensure_ascii=False, default=str) + '\n')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def get_recent_alerts(self, hours: int = 24) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        return [alert for alert in self.alerts if alert.timestamp > cutoff_time]
    
    def get_health_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        recent_alerts = self.get_recent_alerts()
        
        return {
            'monitoring_active': True,
            'last_check': self.last_check_time.isoformat(),
            'total_alerts_24h': len(recent_alerts),
            'critical_alerts_24h': len([a for a in recent_alerts if a.severity == 'critical']),
            'high_alerts_24h': len([a for a in recent_alerts if a.severity == 'high']),
            'recent_alerts': [asdict(alert) for alert in recent_alerts[-10:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
        }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤...")
    
    monitor = WorkerHealthMonitor()
    
    try:
        await monitor.monitor_loop()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
