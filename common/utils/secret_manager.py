"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –¥–ª—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Secret Manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
"""

import os
import logging
from typing import Dict, Optional, Any, Union
import json

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Google Cloud —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è production
try:
    from google.cloud import secretmanager
    from google.auth.exceptions import GoogleAuthError
    GOOGLE_CLOUD_AVAILABLE = True
except ImportError:
    secretmanager = None
    GoogleAuthError = Exception
    GOOGLE_CLOUD_AVAILABLE = False

logger = logging.getLogger(__name__)


class SecretManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Google Secret Manager –∏ fallback –Ω–∞ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    
    def __init__(self, project_id: Optional[str] = None):
        self.project_id = project_id or os.getenv('GOOGLE_CLOUD_PROJECT', '')
        self.environment = os.getenv('ENVIRONMENT', 'development')
        self._client = None
        self._secrets_cache = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Secret Manager –¥–ª—è production
        if self.environment == 'production' and self.project_id and GOOGLE_CLOUD_AVAILABLE:
            try:
                self._client = secretmanager.SecretManagerServiceClient()
                logger.info(f"‚úÖ Secret Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {self.project_id}")
            except GoogleAuthError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Cloud: {e}")
                self._client = None
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Secret Manager: {e}")
                self._client = None
        else:
            if not GOOGLE_CLOUD_AVAILABLE:
                logger.info(f"‚ÑπÔ∏è Google Cloud –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            logger.info(f"‚ÑπÔ∏è Secret Manager –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è {self.environment} –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def get_secret(self, secret_name: str, default: Optional[str] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ Google Secret Manager –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        Args:
            secret_name: –ò–º—è —Å–µ–∫—Ä–µ—Ç–∞
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∏–ª–∏ default
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if secret_name in self._secrets_cache:
            return self._secrets_cache[secret_name]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Secret Manager
        if self._client and self.project_id:
            try:
                secret_path = f"projects/{self.project_id}/secrets/{secret_name}/versions/latest"
                response = self._client.access_secret_version(request={"name": secret_path})
                secret_value = response.payload.data.decode("UTF-8")
                
                # –ö—ç—à–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç
                self._secrets_cache[secret_name] = secret_value
                logger.debug(f"‚úÖ –°–µ–∫—Ä–µ—Ç '{secret_name}' –ø–æ–ª—É—á–µ–Ω –∏–∑ Secret Manager")
                return secret_value
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç '{secret_name}' –∏–∑ Secret Manager: {e}")
        
        # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_value = os.getenv(secret_name, default)
        if env_value:
            logger.debug(f"‚úÖ –°–µ–∫—Ä–µ—Ç '{secret_name}' –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            # –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._secrets_cache[secret_name] = env_value
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ–∫—Ä–µ—Ç '{secret_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Secret Manager, –Ω–∏ –≤ env")
        
        return env_value
    
    def get_database_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
        config = {}
        
        # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ —á–∞—Å—Ç–µ–π
        database_url = self.get_secret('DATABASE_URL')
        if database_url:
            config['DATABASE_URL'] = database_url
        else:
            # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
            config.update({
                'DB_HOST': self.get_secret('DB_HOST', 'localhost'),
                'DB_PORT': self.get_secret('DB_PORT', '5432'),
                'DB_NAME': self.get_secret('DB_NAME', 'hr_test'),
                'DB_USER': self.get_secret('DB_USER', 'test_user'),
                'DB_PASSWORD': self.get_secret('DB_PASSWORD', ''),
            })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º DATABASE_URL
            config['DATABASE_URL'] = (
                f"postgresql://{config['DB_USER']}:{config['DB_PASSWORD']}@"
                f"{config['DB_HOST']}:{config['DB_PORT']}/{config['DB_NAME']}"
            )
        
        # SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è production
        if self.environment == 'production':
            config.update({
                'DB_SSL_MODE': self.get_secret('DB_SSL_MODE', 'require'),
                'DB_SSL_CERT': self.get_secret('DB_SSL_CERT'),
                'DB_SSL_KEY': self.get_secret('DB_SSL_KEY'),
                'DB_SSL_ROOTCERT': self.get_secret('DB_SSL_ROOTCERT'),
            })
        
        return config
    
    def get_redis_config(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
        return {
            'REDIS_URL': self.get_secret('REDIS_URL', 'redis://localhost:6379/0') or 'redis://localhost:6379/0',
            'REDIS_PASSWORD': self.get_secret('REDIS_PASSWORD', '') or '',
        }
    
    def get_celery_config(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
        redis_url = self.get_secret('REDIS_URL', 'redis://localhost:6379/0') or 'redis://localhost:6379/0'
        return {
            'CELERY_BROKER_URL': self.get_secret('CELERY_BROKER_URL') or redis_url,
            'CELERY_RESULT_BACKEND': self.get_secret('CELERY_RESULT_BACKEND') or redis_url,
        }
    
    def get_external_apis_config(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö API —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
        return {
            'FILLOUT_API_KEY': self.get_secret('FILLOUT_API_KEY', '') or '',
            'OPENAI_API_KEY': self.get_secret('OPENAI_API_KEY', '') or '',
            'ANTHROPIC_API_KEY': self.get_secret('ANTHROPIC_API_KEY', '') or '',
        }
    
    def get_gcp_config(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GCP —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
        return {
            'GOOGLE_CLOUD_PROJECT': self.get_secret('GOOGLE_CLOUD_PROJECT', self.project_id) or self.project_id or '',
            'GPU_INSTANCE_NAME': self.get_secret('GPU_INSTANCE_NAME', '') or '',
            'GPU_ZONE': self.get_secret('GPU_ZONE', 'us-central1-a') or 'us-central1-a',
            'GCP_SERVICE_ACCOUNT_KEY': self.get_secret('GCP_SERVICE_ACCOUNT_KEY', '') or '',
        }
    
    def validate_required_secrets(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        required_secrets = [
            'DATABASE_URL',
            'REDIS_URL',
        ]
        
        missing_secrets = []
        for secret in required_secrets:
            if not self.get_secret(secret):
                missing_secrets.append(secret)
        
        if missing_secrets:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã: {missing_secrets}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        self._secrets_cache.clear()
        logger.info("üóëÔ∏è –ö—ç—à —Å–µ–∫—Ä–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
secret_manager = SecretManager()


def get_secret(secret_name: str, default: Optional[str] = None) -> Optional[str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞"""
    return secret_manager.get_secret(secret_name, default)


def get_all_secrets() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    config = {}
    config.update(secret_manager.get_database_config())
    config.update(secret_manager.get_redis_config())
    config.update(secret_manager.get_celery_config())
    config.update(secret_manager.get_external_apis_config())
    config.update(secret_manager.get_gcp_config())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config.update({
        'ENVIRONMENT': secret_manager.environment,
        'DEBUG': os.getenv('DEBUG', 'False').lower() == 'true',
        'LOG_LEVEL': get_secret('LOG_LEVEL', 'INFO'),
    })
    
    return config


def get_database_url_with_ssl() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å SSL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    config = secret_manager.get_database_config()
    
    # –ë–∞–∑–æ–≤—ã–π URL
    db_url = config.get('DATABASE_URL', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º SSL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è production
    if secret_manager.environment == 'production':
        ssl_params = []
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π SSL –¥–ª—è production
        ssl_mode = config.get('DB_SSL_MODE', 'require')
        ssl_params.append(f"sslmode={ssl_mode}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SSL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if config.get('DB_SSL_CERT'):
            ssl_params.append(f"sslcert={config['DB_SSL_CERT']}")
        if config.get('DB_SSL_KEY'):
            ssl_params.append(f"sslkey={config['DB_SSL_KEY']}")
        if config.get('DB_SSL_ROOTCERT'):
            ssl_params.append(f"sslrootcert={config['DB_SSL_ROOTCERT']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
        separator = '&' if '?' in db_url else '?'
        db_url = f"{db_url}{separator}{'&'.join(ssl_params)}"
    else:
        # –î–ª—è development –∏—Å–ø–æ–ª—å–∑—É–µ–º prefer (–ø—ã—Ç–∞–µ–º—Å—è SSL, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º)
        separator = '&' if '?' in db_url else '?'
        db_url = f"{db_url}{separator}sslmode=prefer"
    
    return db_url


def get_redis_url_with_auth() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL Redis —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    redis_config = secret_manager.get_redis_config()
    redis_url = redis_config.get('REDIS_URL', 'redis://localhost:6379/0')
    redis_password = redis_config.get('REDIS_PASSWORD', '')
    
    # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω, –Ω–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ URL, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if redis_password and '://:' not in redis_url and redis_password not in redis_url:
        # –ü–∞—Ä—Å–∏–º URL –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        if redis_url.startswith('redis://'):
            redis_url = redis_url.replace('redis://', f'redis://:{redis_password}@')
        elif redis_url.startswith('rediss://'):
            redis_url = redis_url.replace('rediss://', f'rediss://:{redis_password}@')
    
    return redis_url


def validate_security_settings() -> Dict[str, bool]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    security_checks = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –¥–ª—è production
    if secret_manager.environment == 'production':
        security_checks['ssl_enabled'] = 'sslmode=require' in get_database_url_with_ssl()
        security_checks['redis_auth'] = bool(secret_manager.get_secret('REDIS_PASSWORD'))
    else:
        security_checks['ssl_enabled'] = True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è dev
        security_checks['redis_auth'] = True   # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è dev
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
    critical_secrets = ['DATABASE_URL', 'REDIS_URL']
    for secret in critical_secrets:
        security_checks[f'{secret.lower()}_present'] = bool(secret_manager.get_secret(secret))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    security_checks['no_default_passwords'] = _check_no_default_passwords()
    
    return security_checks


def _check_no_default_passwords() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö/–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
    dangerous_defaults = ['password', 'admin', '123456', 'root', 'postgres', '']
    
    db_password = secret_manager.get_secret('DB_PASSWORD', '')
    redis_password = secret_manager.get_secret('REDIS_PASSWORD', '')
    
    # –í production –ø–∞—Ä–æ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏
    if secret_manager.environment == 'production':
        if not db_password or db_password.lower() in dangerous_defaults:
            logger.warning("‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
        if not redis_password or redis_password.lower() in dangerous_defaults:
            logger.warning("‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å Redis")
            return False
    
    return True
