"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPU –∏–Ω—Å—Ç–∞–Ω—Å–æ–º –≤ Google Cloud
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å GPU —Å–µ—Ä–≤–µ—Ä –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
"""

import os
import subprocess
import logging
import time
from typing import Optional, Dict, Any
import json


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class GCloudGPUManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPU –∏–Ω—Å—Ç–∞–Ω—Å–æ–º –≤ Google Cloud"""
    
    def __init__(self):
        self.project_id = os.getenv('GOOGLE_CLOUD_PROJECT')
        self.zone = os.getenv('GOOGLE_CLOUD_ZONE', 'us-central1-a')
        self.instance_name = os.getenv('GPU_INSTANCE_NAME')
        
        if not self.project_id:
            raise ValueError("GOOGLE_CLOUD_PROJECT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.instance_name:
            raise ValueError("GPU_INSTANCE_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info(f"GPU Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.instance_name} –≤ {self.zone}")
    
    def _run_gcloud_command(self, command: list) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É gcloud –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            cmd = ['gcloud'] + command + ['--format=json', f'--project={self.project_id}']
            logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            if result.stdout:
                return json.loads(result.stdout)
            return {}
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã gcloud: {e}")
            logger.error(f"Stdout: {e.stdout}")
            logger.error(f"Stderr: {e.stderr}")
            raise
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            raise
    
    def get_instance_status(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞"""
        try:
            result = self._run_gcloud_command([
                'compute', 'instances', 'describe',
                self.instance_name,
                f'--zone={self.zone}'
            ])
            
            status = result.get('status', 'UNKNOWN')
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç–∞–Ω—Å–∞ {self.instance_name}: {status}")
            return status
            
        except subprocess.CalledProcessError as e:
            if 'was not found' in e.stderr:
                logger.warning(f"–ò–Ω—Å—Ç–∞–Ω—Å {self.instance_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            raise
    
    def is_instance_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ GPU –∏–Ω—Å—Ç–∞–Ω—Å"""
        status = self.get_instance_status()
        return status == 'RUNNING'
    
    def start_instance(self, wait_for_startup: bool = True) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å GPU –∏–Ω—Å—Ç–∞–Ω—Å"""
        logger.info(f"–ó–∞–ø—É—Å–∫ GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞ {self.instance_name}...")
        
        if self.is_instance_running():
            logger.info("–ò–Ω—Å—Ç–∞–Ω—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        
        try:
            self._run_gcloud_command([
                'compute', 'instances', 'start',
                self.instance_name,
                f'--zone={self.zone}'
            ])
            
            logger.info("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            if wait_for_startup:
                return self._wait_for_status('RUNNING', timeout=300)  # 5 –º–∏–Ω—É—Ç
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞: {e}")
            return False
    
    def stop_instance(self, wait_for_shutdown: bool = True) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å GPU –∏–Ω—Å—Ç–∞–Ω—Å"""
        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞ {self.instance_name}...")
        
        if not self.is_instance_running():
            logger.info("–ò–Ω—Å—Ç–∞–Ω—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        
        try:
            self._run_gcloud_command([
                'compute', 'instances', 'stop',
                self.instance_name,
                f'--zone={self.zone}'
            ])
            
            logger.info("–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            if wait_for_shutdown:
                return self._wait_for_status('TERMINATED', timeout=120)  # 2 –º–∏–Ω—É—Ç—ã
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞: {e}")
            return False
    
    def _wait_for_status(self, target_status: str, timeout: int = 300) -> bool:
        """–ñ–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞"""
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ {target_status}...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            current_status = self.get_instance_status()
            
            if current_status == target_status:
                logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—Ç–∞—Ç—É—Å {target_status}")
                return True
            
            logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}, –æ–∂–∏–¥–∞–Ω–∏–µ...")
            time.sleep(10)
        
        logger.error(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {target_status}")
        return False
    
    def get_instance_external_ip(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞"""
        try:
            result = self._run_gcloud_command([
                'compute', 'instances', 'describe',
                self.instance_name,
                f'--zone={self.zone}'
            ])
            
            network_interfaces = result.get('networkInterfaces', [])
            if network_interfaces:
                access_configs = network_interfaces[0].get('accessConfigs', [])
                if access_configs:
                    external_ip = access_configs[0].get('natIP')
                    logger.info(f"–í–Ω–µ—à–Ω–∏–π IP: {external_ip}")
                    return external_ip
            
            logger.warning("–í–Ω–µ—à–Ω–∏–π IP –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞: {e}")
            return None
    
    def wait_for_ssh_ready(self, timeout: int = 120) -> bool:
        """–ñ–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SSH...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                cmd = [
                    'gcloud', 'compute', 'ssh',
                    f'--zone={self.zone}',
                    f'--project={self.project_id}',
                    self.instance_name,
                    '--command=echo "SSH ready"'
                ]
                subprocess.run(
                    cmd,
                    capture_output=True, 
                    check=True, 
                    timeout=30
                )
                
                logger.info("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
                return True
                
            except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
                logger.info("SSH –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                time.sleep(10)
        
        logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è SSH")
        return False
    
    def get_instance_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç–∞–Ω—Å–µ"""
        try:
            result = self._run_gcloud_command([
                'compute', 'instances', 'describe',
                self.instance_name,
                f'--zone={self.zone}'
            ])
            
            return {
                'name': result.get('name'),
                'status': result.get('status'),
                'zone': result.get('zone', '').split('/')[-1],
                'machineType': result.get('machineType', '').split('/')[-1],
                'creationTimestamp': result.get('creationTimestamp'),
                'lastStartTimestamp': result.get('lastStartTimestamp'),
                'lastStopTimestamp': result.get('lastStopTimestamp'),
                'externalIP': self.get_instance_external_ip()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç–∞–Ω—Å–µ: {e}")
            return {}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python gcloud_manager.py [start|stop|status|info]")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    try:
        manager = GCloudGPUManager()
        
        if command == 'start':
            success = manager.start_instance()
            if success:
                print("‚úÖ GPU –∏–Ω—Å—Ç–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                if manager.wait_for_ssh_ready():
                    print("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
                    print(f"üåê –í–Ω–µ—à–Ω–∏–π IP: {manager.get_instance_external_ip()}")
                else:
                    print("‚ö†Ô∏è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞")
                sys.exit(1)
                
        elif command == 'stop':
            success = manager.stop_instance()
            if success:
                print("‚úÖ GPU –∏–Ω—Å—Ç–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞")
                sys.exit(1)
                
        elif command == 'status':
            status = manager.get_instance_status()
            if status:
                print(f"üìä –°—Ç–∞—Ç—É—Å GPU –∏–Ω—Å—Ç–∞–Ω—Å–∞: {status}")
                if status == 'RUNNING':
                    print(f"üåê –í–Ω–µ—à–Ω–∏–π IP: {manager.get_instance_external_ip()}")
            else:
                print("‚ùå GPU –∏–Ω—Å—Ç–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        elif command == 'info':
            info = manager.get_instance_info()
            if info:
                print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU –∏–Ω—Å—Ç–∞–Ω—Å–µ:")
                for key, value in info.items():
                    print(f"  {key}: {value}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç–∞–Ω—Å–µ")
                
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: start, stop, status, info")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
