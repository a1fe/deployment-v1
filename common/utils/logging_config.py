"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–æ—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Google Cloud Logging
"""

import os
import sys
import logging
import logging.handlers
import json
import traceback
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Google Cloud Logging
try:
    from google.cloud import logging as gcp_logging
    GCP_LOGGING_AVAILABLE = True
except ImportError:
    GCP_LOGGING_AVAILABLE = False


class StructuredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    def format(self, record: logging.LogRecord) -> str:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–∞
        log_entry = {
            'timestamp': datetime.utcnow().isoformat() + 'Z',
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if hasattr(record, 'extra_fields') and getattr(record, 'extra_fields', None):
            log_entry.update(getattr(record, 'extra_fields'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            log_entry['exception'] = {
                'type': record.exc_info[0].__name__ if record.exc_info[0] else None,
                'message': str(record.exc_info[1]) if record.exc_info[1] else None,
                'traceback': traceback.format_exception(*record.exc_info)
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        log_entry['environment'] = {
            'process_id': os.getpid(),
            'environment': os.getenv('ENVIRONMENT', 'development'),
            'hostname': os.getenv('HOSTNAME', 'unknown'),
            'service': os.getenv('SERVICE_NAME', 'hr-analysis'),
        }
        
        return json.dumps(log_entry, ensure_ascii=False)


class CloudLoggingHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Google Cloud Logging"""
    
    def __init__(self, project_id: Optional[str] = None):
        super().__init__()
        self.project_id = project_id or os.getenv('GOOGLE_CLOUD_PROJECT')
        self.client = None
        
        if GCP_LOGGING_AVAILABLE and self.project_id:
            try:
                self.client = gcp_logging.Client(project=self.project_id)
                self.cloud_logger = self.client.logger('hr-analysis')
                self.setFormatter(StructuredFormatter())
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Cloud Logging: {e}")
                self.client = None
    
    def emit(self, record: logging.LogRecord):
        if not self.client:
            return
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_message = self.format(record)
            log_data = json.loads(formatted_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cloud Logging
            severity = self._get_cloud_severity(record.levelname)
            self.cloud_logger.log_struct(log_data, severity=severity)
            
        except Exception as e:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Cloud: {e}")
    
    def _get_cloud_severity(self, level: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Google Cloud"""
        mapping = {
            'DEBUG': 'DEBUG',
            'INFO': 'INFO',
            'WARNING': 'WARNING',
            'ERROR': 'ERROR',
            'CRITICAL': 'CRITICAL'
        }
        return mapping.get(level, 'INFO')


class LoggingConfig:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, service_name: str = 'hr-analysis'):
        self.service_name = service_name
        self.environment = os.getenv('ENVIRONMENT', 'development')
        self.log_level = os.getenv('LOG_LEVEL', 'INFO')
        self.log_dir = Path(os.getenv('LOG_DIR', './logs'))
        self.enable_cloud_logging = os.getenv('ENABLE_CLOUD_LOGGING', 'false').lower() == 'true'
        self.enable_file_logging = os.getenv('ENABLE_FILE_LOGGING', 'true').lower() == 'true'
        self.enable_console_logging = os.getenv('ENABLE_CONSOLE_LOGGING', 'true').lower() == 'true'
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        if self.enable_file_logging:
            self.log_dir.mkdir(parents=True, exist_ok=True)
    
    def setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        root_logger = logging.getLogger()
        root_logger.handlers.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        root_logger.setLevel(getattr(logging, self.log_level.upper()))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.enable_console_logging:
            console_handler = logging.StreamHandler(sys.stdout)
            if self.environment == 'production':
                console_handler.setFormatter(StructuredFormatter())
            else:
                console_formatter = logging.Formatter(
                    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
                )
                console_handler.setFormatter(console_formatter)
            root_logger.addHandler(console_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.enable_file_logging:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
            main_log_file = self.log_dir / f'{self.service_name}.log'
            file_handler = logging.handlers.RotatingFileHandler(
                main_log_file,
                maxBytes=50 * 1024 * 1024,  # 50MB
                backupCount=10,
                encoding='utf-8'
            )
            file_handler.setFormatter(StructuredFormatter())
            root_logger.addHandler(file_handler)
            
            # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
            error_log_file = self.log_dir / f'{self.service_name}-errors.log'
            error_handler = logging.handlers.RotatingFileHandler(
                error_log_file,
                maxBytes=10 * 1024 * 1024,  # 10MB
                backupCount=5,
                encoding='utf-8'
            )
            error_handler.setLevel(logging.ERROR)
            error_handler.setFormatter(StructuredFormatter())
            root_logger.addHandler(error_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloud Logging –¥–ª—è production
        if self.enable_cloud_logging and self.environment == 'production':
            cloud_handler = CloudLoggingHandler()
            if cloud_handler.client:
                root_logger.addHandler(cloud_handler)
                print("‚úÖ Google Cloud Logging –≤–∫–ª—é—á–µ–Ω")
            else:
                print("‚ö†Ô∏è Google Cloud Logging –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_logger = logging.getLogger(self.service_name)
        app_logger.info(f"üöÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è {self.service_name}")
        app_logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å: {self.log_level}, –û–∫—Ä—É–∂–µ–Ω–∏–µ: {self.environment}")
        
        return app_logger
    
    def get_component_logger(self, component_name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        logger_name = f"{self.service_name}.{component_name}"
        return logging.getLogger(logger_name)


class LogContext:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ª–æ–≥–∏"""
    
    def __init__(self, **kwargs):
        self.extra_fields = kwargs
        self._original_factory = None
    
    def __enter__(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É –∑–∞–ø–∏—Å–µ–π
        self._original_factory = logging.getLogRecordFactory()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        def record_factory(*args, **kwargs):
            record = self._original_factory(*args, **kwargs) if self._original_factory else logging.LogRecord(*args, **kwargs)
            setattr(record, 'extra_fields', self.extra_fields)
            return record
        
        logging.setLogRecordFactory(record_factory)
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É
        if self._original_factory:
            logging.setLogRecordFactory(self._original_factory)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
_logging_config = None
_app_logger = None


def setup_logging(service_name: str = 'hr-analysis') -> logging.Logger:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    global _logging_config, _app_logger
    
    if _logging_config is None:
        _logging_config = LoggingConfig(service_name)
        _app_logger = _logging_config.setup_logging()
    
    return _app_logger or logging.getLogger(service_name)


def get_logger(component_name: str = '') -> logging.Logger:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Args:
        component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
    Returns:
        –õ–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    """
    if _logging_config is None:
        setup_logging()
    
    if component_name and _logging_config:
        return _logging_config.get_component_logger(component_name)
    else:
        return _app_logger or logging.getLogger()


def log_with_context(**context):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Usage:
        @log_with_context(task_id='12345', user_id='user1')
        def my_function():
            logger = get_logger('my_component')
            logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞")
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            with LogContext(**context):
                return func(*args, **kwargs)
        return wrapper
    return decorator


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ != "__main__":
    setup_logging()
