#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import os
import asyncio
import time
import json
from typing import Dict, Any, List
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from deployment.common.utils.embedding_quality_test import check_embedding_quality
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å embedding_quality_test: {e}")
    check_embedding_quality = None

try:
    from deployment.common.utils.worker_monitor import WorkerHealthMonitor
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å worker_monitor: {e}")
    WorkerHealthMonitor = None

try:
    from deployment.common.utils.secret_manager import secret_manager, get_secret
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å secret_manager: {e}")
    secret_manager = None
    get_secret = lambda key, default=None: os.getenv(key, default)


class HealthChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'overall_status': 'unknown',
            'checks': {},
            'summary': {
                'total': 0,
                'passed': 0,
                'warnings': 0,
                'failed': 0
            }
        }
    
    async def run_all_checks(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        checks = [
            ('secrets', self.check_secrets),
            ('database', self.check_database),
            ('redis', self.check_redis),
            ('workers', self.check_workers),
            ('gpu_quality', self.check_gpu_quality),
            ('queues', self.check_queues),
            ('disk_space', self.check_disk_space),
            ('memory', self.check_memory),
            ('services', self.check_systemd_services),
        ]
        
        print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        print("=" * 50)
        
        for check_name, check_func in checks:
            try:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {check_name}...", end=' ')
                result = await check_func()
                self.results['checks'][check_name] = result
                self.results['summary']['total'] += 1
                
                status = result.get('status', 'unknown')
                if status == 'ok':
                    print("‚úÖ OK")
                    self.results['summary']['passed'] += 1
                elif status == 'warning':
                    print("‚ö†Ô∏è WARNING")
                    self.results['summary']['warnings'] += 1
                elif status == 'skip':
                    print("‚è≠Ô∏è SKIP")
                else:
                    print("‚ùå FAILED")
                    self.results['summary']['failed'] += 1
                
                if result.get('message'):
                    print(f"   üí¨ {result['message']}")
                    
            except Exception as e:
                print(f"‚ùå ERROR")
                print(f"   üí¨ {str(e)}")
                self.results['checks'][check_name] = {
                    'status': 'error',
                    'message': str(e)
                }
                self.results['summary']['total'] += 1
                self.results['summary']['failed'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        self._determine_overall_status()
        
        print("=" * 50)
        self._print_summary()
        
        return self.results
    
    def _determine_overall_status(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        total = self.results['summary']['total']
        passed = self.results['summary']['passed']
        warnings = self.results['summary']['warnings']
        failed = self.results['summary']['failed']
        
        if failed == 0 and warnings == 0:
            self.results['overall_status'] = 'healthy'
        elif failed == 0 and warnings <= total * 0.2:
            self.results['overall_status'] = 'mostly_healthy'
        elif failed <= total * 0.2:
            self.results['overall_status'] = 'warning'
        else:
            self.results['overall_status'] = 'critical'
    
    def _print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        summary = self.results['summary']
        status = self.results['overall_status']
        
        print(f"üìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {summary['total']}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed']}")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {summary['warnings']}")
        print(f"   –û—à–∏–±–∫–∏: {summary['failed']}")
        print()
        
        status_icons = {
            'healthy': '‚úÖ',
            'mostly_healthy': 'üü¢',
            'warning': '‚ö†Ô∏è',
            'critical': '‚ùå'
        }
        
        status_messages = {
            'healthy': '–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞',
            'mostly_healthy': '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏',
            'warning': '–°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã',
            'critical': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏'
        }
        
        icon = status_icons.get(status, '‚ùì')
        message = status_messages.get(status, '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
        
        print(f"{icon} –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {status.upper()}")
        print(f"   {message}")
    
    async def check_secrets(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        try:
            if secret_manager is None:
                return {
                    'status': 'warning',
                    'message': 'Secret Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
                }
            
            if not secret_manager.validate_required_secrets():
                return {
                    'status': 'error',
                    'message': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
                }
            
            return {
                'status': 'ok',
                'message': '–°–µ–∫—Ä–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã'
            }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_database(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database.config import Database
            db = Database()
            
            with db.engine.connect() as conn:
                result = conn.execute("SELECT 1").fetchone()
                if result and result[0] == 1:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    version_result = conn.execute("SELECT version()").fetchone()
                    version = version_result[0] if version_result else 'unknown'
                    
                    return {
                        'status': 'ok',
                        'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞',
                        'details': {'version': version[:50] + '...'}
                    }
            
            return {
                'status': 'error',
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
            }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_redis(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            import redis
            
            redis_url = get_secret('REDIS_URL', 'redis://localhost:6379/0')
            r = redis.from_url(redis_url)
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            r.ping()
            test_key = f'health_check_{int(time.time())}'
            r.set(test_key, 'ok', ex=10)
            value = r.get(test_key)
            r.delete(test_key)
            
            if value == b'ok':
                info = r.info()
                return {
                    'status': 'ok',
                    'message': 'Redis –¥–æ—Å—Ç—É–ø–µ–Ω',
                    'details': {
                        'version': info.get('redis_version', 'unknown'),
                        'memory_usage': info.get('used_memory_human', 'unknown')
                    }
                }
            else:
                return {
                    'status': 'error',
                    'message': '–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è Redis –Ω–µ —É–¥–∞–ª–∞—Å—å'
                }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_workers(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Celery –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        try:
            if WorkerHealthMonitor is None:
                return {
                    'status': 'warning',
                    'message': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                }
            
            monitor = WorkerHealthMonitor()
            workers = await monitor.check_workers_health()
            
            if not workers:
                return {
                    'status': 'error',
                    'message': '–í–æ—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                }
            
            alive_workers = [w for w in workers if w.is_alive]
            
            if len(alive_workers) == len(workers):
                return {
                    'status': 'ok',
                    'message': f'–í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã ({len(workers)})',
                    'details': {
                        'total_workers': len(workers),
                        'alive_workers': len(alive_workers),
                        'worker_names': [w.name for w in workers]
                    }
                }
            else:
                return {
                    'status': 'warning',
                    'message': f'–ê–∫—Ç–∏–≤–Ω–æ {len(alive_workers)}/{len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤',
                    'details': {
                        'total_workers': len(workers),
                        'alive_workers': len(alive_workers)
                    }
                }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_gpu_quality(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ GPU —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        try:
            if not os.getenv('GPU_INSTANCE_NAME'):
                return {
                    'status': 'skip',
                    'message': 'GPU –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                }
            
            if check_embedding_quality is None:
                return {
                    'status': 'warning',
                    'message': '–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                }
            
            result = check_embedding_quality(timeout=120)
            
            if result['success']:
                quality_score = result['metrics'].get('quality_score', 0)
                if quality_score > 0.7:
                    return {
                        'status': 'ok',
                        'message': f'–ö–∞—á–µ—Å—Ç–≤–æ GPU —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ö–æ—Ä–æ—à–µ–µ ({quality_score:.2f})',
                        'details': result['metrics']
                    }
                else:
                    return {
                        'status': 'warning',
                        'message': f'–ö–∞—á–µ—Å—Ç–≤–æ GPU —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å—Ä–µ–¥–Ω–µ–µ ({quality_score:.2f})',
                        'details': result['metrics']
                    }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPU: {result["error"]}'
                }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_queues(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π"""
        try:
            if WorkerHealthMonitor is None:
                return {
                    'status': 'warning',
                    'message': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                }
            
            monitor = WorkerHealthMonitor()
            queues = await monitor.check_queues_health()
            
            if not queues:
                return {
                    'status': 'warning',
                    'message': '–û—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                }
            
            overloaded = [q for q in queues if q.pending_tasks > 100]
            no_workers = [q for q in queues if q.workers_count == 0]
            
            if overloaded:
                return {
                    'status': 'warning',
                    'message': f'–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã –æ—á–µ—Ä–µ–¥–∏: {[q.name for q in overloaded]}',
                    'details': {'total_queues': len(queues)}
                }
            elif no_workers:
                return {
                    'status': 'warning',
                    'message': f'–ù–µ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π: {[q.name for q in no_workers]}',
                    'details': {'total_queues': len(queues)}
                }
            else:
                return {
                    'status': 'ok',
                    'message': f'–í—Å–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –ø–æ—Ä—è–¥–∫–µ ({len(queues)})',
                    'details': {
                        'total_queues': len(queues),
                        'queue_names': [q.name for q in queues]
                    }
                }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_disk_space(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        try:
            import shutil
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            paths_to_check = [
                '/',
                '/var/log',
                '/tmp',
                '/home/hr-user/hr-analysis'
            ]
            
            warnings = []
            critical = []
            
            for path in paths_to_check:
                if os.path.exists(path):
                    total, used, free = shutil.disk_usage(path)
                    free_percent = (free / total) * 100
                    
                    if free_percent < 5:
                        critical.append(f"{path}: {free_percent:.1f}% —Å–≤–æ–±–æ–¥–Ω–æ")
                    elif free_percent < 15:
                        warnings.append(f"{path}: {free_percent:.1f}% —Å–≤–æ–±–æ–¥–Ω–æ")
            
            if critical:
                return {
                    'status': 'error',
                    'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞: {", ".join(critical)}'
                }
            elif warnings:
                return {
                    'status': 'warning',
                    'message': f'–ú–∞–ª–æ –º–µ—Å—Ç–∞: {", ".join(warnings)}'
                }
            else:
                return {
                    'status': 'ok',
                    'message': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ'
                }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_memory(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            
            if memory_percent > 90:
                return {
                    'status': 'error',
                    'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%'
                }
            elif memory_percent > 80:
                return {
                    'status': 'warning',
                    'message': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%'
                }
            else:
                return {
                    'status': 'ok',
                    'message': f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ: {memory_percent:.1f}%',
                    'details': {
                        'total_gb': round(memory.total / (1024**3), 1),
                        'available_gb': round(memory.available / (1024**3), 1)
                    }
                }
        except ImportError:
            return {
                'status': 'warning',
                'message': 'psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}
    
    async def check_systemd_services(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            import subprocess
            
            services = [
                'hr-celery-cpu',
                'hr-worker-monitor',
                'redis-server',
                'postgresql'
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPU —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            if os.getenv('GPU_INSTANCE_NAME'):
                services.extend(['hr-celery-gpu', 'hr-gpu-monitor'])
            
            failed_services = []
            inactive_services = []
            active_services = []
            
            for service in services:
                try:
                    result = subprocess.run(
                        ['systemctl', 'is-active', service],
                        capture_output=True,
                        text=True,
                        timeout=5
                    )
                    
                    if result.returncode == 0 and result.stdout.strip() == 'active':
                        active_services.append(service)
                    else:
                        inactive_services.append(service)
                        
                except subprocess.TimeoutExpired:
                    failed_services.append(f"{service} (timeout)")
                except Exception as e:
                    failed_services.append(f"{service} ({str(e)})")
            
            if failed_services:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {", ".join(failed_services)}'
                }
            elif inactive_services:
                return {
                    'status': 'warning',
                    'message': f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {", ".join(inactive_services)}',
                    'details': {'active_services': active_services}
                }
            else:
                return {
                    'status': 'ok',
                    'message': f'–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã ({len(active_services)})',
                    'details': {'active_services': active_services}
                }
        except Exception as e:
            return {'status': 'error', 'message': str(e)}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = HealthChecker()
    results = await checker.run_all_checks()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    results_file = f"/tmp/health_check_{int(time.time())}.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    status = results['overall_status']
    if status == 'healthy':
        sys.exit(0)
    elif status in ['mostly_healthy', 'warning']:
        sys.exit(1)
    else:
        sys.exit(2)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(2)
