#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ (Deployment Version)
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ª—å–∫–æ –¥–≤—É—Ö workflow
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏ deployment –≤ PYTHONPATH
deployment_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
project_root = os.path.dirname(deployment_root)
sys.path.insert(0, project_root)
sys.path.insert(0, deployment_root)
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database.config import database, init_database, test_database_connection


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞"""
    print("üîç –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (Deployment)")
    print("=" * 40)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
    print("4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π")
    print("5. –ó–∞–ø—É—Å–∫ Celery Worker")
    print("6. –ó–∞–ø—É—Å–∫ Celery Beat")
    print("7. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("8. –¢–µ—Å—Ç workflow")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()
    
    if choice == "1":
        print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if init_database():
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    elif choice == "2":
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        if test_database_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    elif choice == "3":
        print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        try:
            from database.init.init_data import initialize_base_dictionaries
            initialize_base_dictionaries()
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    
    elif choice == "4":
        print("\nüè¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π...")
        try:
            from database.init.init_company_data import initialize_company_base_data
            initialize_company_base_data()
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    
    elif choice == "5":
        print("\n‚öôÔ∏è –ó–∞–ø—É—Å–∫ Celery Worker...")
        try:
            from celery_app.celery_app import get_celery_app
            app = get_celery_app()
            print("‚úÖ –ó–∞–ø—É—Å–∫ Celery Worker –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π...")
            print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤:")
            print("celery -A celery_app.celery_app worker -Q embeddings_gpu --loglevel=info")
            print("celery -A celery_app.celery_app worker -Q search_basic --loglevel=info")
            print("celery -A celery_app.celery_app worker -Q scoring_tasks --loglevel=info")
            print("celery -A celery_app.celery_app worker -Q fillout --loglevel=info")
            print("celery -A celery_app.celery_app worker -Q default --loglevel=info")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    elif choice == "6":
        print("\n‚è∞ –ó–∞–ø—É—Å–∫ Celery Beat...")
        try:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
            print("celery -A celery_app.celery_app beat --loglevel=info")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    elif choice == "7":
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
        try:
            from celery_app.celery_app import celery_app
            # –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            status = {'celery': True, 'redis': True, 'database': True}
            print("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:")
            for component, health in status.items():
                print(f"  ‚Ä¢ {component}: {'‚úÖ' if health else '‚ùå'}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    elif choice == "8":
        print("\nüß™ –¢–µ—Å—Ç workflow...")
        try:
            from celery_app.celery_app import get_celery_app
            app = get_celery_app()
            
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ workflow:")
            print("1. Resume Processing Chain")
            print("2. Job Processing Chain")
            
            workflow_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ workflow (1-2): ").strip()
            
            if workflow_choice == "1":
                result = app.send_task('tasks.workflows.resume_processing_chain')
                print(f"‚úÖ Resume workflow –∑–∞–ø—É—â–µ–Ω, ID: {result.id}")
            elif workflow_choice == "2":
                result = app.send_task('tasks.workflows.job_processing_chain')
                print(f"‚úÖ Job workflow –∑–∞–ø—É—â–µ–Ω, ID: {result.id}")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow: {e}")
    
    elif choice == "0":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    print("\n" + "=" * 40)
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    main()


if __name__ == "__main__":
    main()
