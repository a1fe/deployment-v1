#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
"""

import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from dotenv import load_dotenv

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
COMMON_DIR = os.path.join(SCRIPT_DIR, '..', '..')
ROOT_DIR = os.path.join(COMMON_DIR, '..')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, COMMON_DIR)
sys.path.insert(0, ROOT_DIR)

# –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
env_paths = [
    os.path.join(COMMON_DIR, '.env'),
    os.path.join(ROOT_DIR, '.env'),
    os.path.join(os.getcwd(), '.env')
]

env_loaded = False
for env_path in env_paths:
    if os.path.exists(env_path):
        load_dotenv(env_path)
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_path}")
        env_loaded = True
        break

if not env_loaded:
    print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã")

def get_db_params():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', '5432')),
        'user': os.getenv('DB_USER', 'test_user'),
        'password': os.getenv('DB_PASSWORD', ''),
        'database': os.getenv('DB_NAME', 'hr_test'),
        'superuser': os.getenv('DB_SUPERUSER', 'postgres'),
        'superuser_password': os.getenv('DB_SUPERUSER_PASSWORD', '')
    }

def check_postgres_connection(params):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host=params['host'],
            port=params['port'],
            user=params['superuser'],
            password=params['superuser_password'],
            database='postgres'
        )
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def user_exists(cursor, username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute("SELECT 1 FROM pg_roles WHERE rolname = %s;", (username,))
    return cursor.fetchone() is not None

def database_exists(cursor, database_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s;", (database_name,))
    return cursor.fetchone() is not None

def create_user_and_database(params):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î postgres
        conn = psycopg2.connect(
            host=params['host'],
            port=params['port'],
            user=params['superuser'],
            password=params['superuser_password'],
            database='postgres'
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_exists(cursor, params['user']):
            print(f"üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {params['user']}...")
            cursor.execute(
                f"CREATE USER {params['user']} WITH PASSWORD %s;",
                (params['password'],)
            )
            cursor.execute(
                f"ALTER USER {params['user']} CREATEDB;"
            )
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {params['user']} —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {params['user']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not database_exists(cursor, params['database']):
            print(f"üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {params['database']}...")
            cursor.execute(
                f"CREATE DATABASE {params['database']} OWNER {params['user']};"
            )
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {params['database']} —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {params['database']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞
        cursor.execute(
            f"GRANT ALL PRIVILEGES ON DATABASE {params['database']} TO {params['user']};"
        )
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ë–î: {e}")
        return False

def check_user_database_connection(params):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ë–î"""
    try:
        conn = psycopg2.connect(
            host=params['host'],
            port=params['port'],
            user=params['user'],
            password=params['password'],
            database=params['database']
        )
        conn.close()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {params['user']} –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î {params['database']}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ë–î: {e}")
        return False

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQLAlchemy"""
    try:
        from common.database.config import database
        if database.create_tables():
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            if apply_migrations():
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from common.database.config import database
        from sqlalchemy import text
        db = database.get_session()
        
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        try:
            # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ education
            print("üìù –ú–∏–≥—Ä–∞—Ü–∏—è 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã education...")
            db.execute(text("""
                DO $$ 
                BEGIN
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
                    IF EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'education' 
                        AND column_name = 'field_of_study' 
                        AND character_maximum_length = 100
                    ) THEN
                        -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª–µ–π
                        ALTER TABLE education 
                        ALTER COLUMN degree_level TYPE VARCHAR(255),
                        ALTER COLUMN field_of_study TYPE VARCHAR(500);
                        
                        RAISE NOTICE '–ú–∏–≥—Ä–∞—Ü–∏—è education: —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã';
                    ELSE
                        RAISE NOTICE '–ú–∏–≥—Ä–∞—Ü–∏—è education: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞';
                    END IF;
                END $$;
            """))
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã education_fields (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            print("üìù –ú–∏–≥—Ä–∞—Ü–∏—è 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã education_fields...")
            db.execute(text("""
                CREATE TABLE IF NOT EXISTS education_fields (
                    field_id SERIAL PRIMARY KEY,
                    education_id INTEGER NOT NULL,
                    field_name VARCHAR(255) NOT NULL,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (education_id) REFERENCES education(education_id) ON DELETE CASCADE
                );
            """))
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            db.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_education_fields_education_id 
                ON education_fields(education_id);
            """))
            
            db.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_education_fields_field_name 
                ON education_fields(field_name);
            """))
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            print("üìù –ú–∏–≥—Ä–∞—Ü–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü...")
            db.execute(text("""
                DO $$ 
                BEGIN
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É submissions –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    IF EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'submissions' 
                        AND column_name = 'work_preference' 
                        AND character_maximum_length < 100
                    ) THEN
                        ALTER TABLE submissions 
                        ALTER COLUMN work_preference TYPE VARCHAR(100),
                        ALTER COLUMN willing_to_relocate TYPE VARCHAR(100);
                        
                        RAISE NOTICE '–ú–∏–≥—Ä–∞—Ü–∏—è submissions: —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã';
                    END IF;
                    
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É candidates
                    IF EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'candidates' 
                        AND column_name = 'current_position' 
                        AND character_maximum_length < 255
                    ) THEN
                        ALTER TABLE candidates 
                        ALTER COLUMN current_position TYPE VARCHAR(255),
                        ALTER COLUMN current_company TYPE VARCHAR(255);
                        
                        RAISE NOTICE '–ú–∏–≥—Ä–∞—Ü–∏—è candidates: —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã';
                    END IF;
                END $$;
            """))
            
            db.commit()
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        try:
            db.rollback()
        except:
            pass
        return False

def initialize_dictionaries():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
    try:
        from common.database.init.init_data import initialize_base_dictionaries
        initialize_base_dictionaries()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö HR Analysis")
    print("=" * 50)
    
    params = get_db_params()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not params['password']:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î (DB_PASSWORD)")
        return False
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    if not check_postgres_connection(params):
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î
    if not create_user_and_database(params):
        return False
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not check_user_database_connection(params):
        return False
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    if not create_tables():
        return False
    
    # –®–∞–≥ 5: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
    if not initialize_dictionaries():
        print("‚ö†Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
    
    print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {params['database']}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {params['user']}")
    print(f"üåê –•–æ—Å—Ç: {params['host']}:{params['port']}")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
