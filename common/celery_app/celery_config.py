"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –¥–ª—è —Å–∏—Å—Ç–µ–º—ã HR Analysis
"""

import os
import logging
from celery import Celery
from dotenv import load_dotenv
from functools import lru_cache

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from .logging_config import setup_celery_logging
from .redis_manager import get_redis_urls
from .celery_env_config import (
    get_environment_config, 
    get_task_routes, 
    get_beat_schedule
)

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
server_type = os.environ.get('SERVER_TYPE', 'cpu')  # 'cpu' –∏–ª–∏ 'gpu'
gpu_enabled = bool(os.environ.get('GPU_INSTANCE_NAME'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_celery_logging()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Celery
@lru_cache(maxsize=1)
def _create_celery_app():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Celery"""
    # –ü–æ–ª—É—á–∞–µ–º URL Redis
    broker_url, result_backend = get_redis_urls()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Celery
    app = Celery(
        'hr_analysis',
        broker=broker_url,
        backend=result_backend,
        include=[
            'tasks.workflows',
            'tasks.fillout_tasks',
            'tasks.embedding_tasks',
            'tasks.matching',  # Production-ready matching tasks
            'tasks.scoring_tasks',  # BGE Reranker scoring tasks
            'tasks.analysis_tasks'
        ]
    )
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        import tasks.workflows
        import tasks.fillout_tasks
        import tasks.embedding_tasks
        import tasks.matching
        import tasks.scoring_tasks
        import tasks.analysis_tasks
        logger.info("‚úÖ All task modules imported successfully")
    except Exception as e:
        logger.error(f"‚ùå Error importing task modules: {e}")
    
    return app

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä Celery
celery_app = _create_celery_app()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
env_config = get_environment_config(ENVIRONMENT)

# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
def _configure_celery_app():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Celery —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    base_config = {
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
        'timezone': 'UTC',
        'enable_utc': True,
        
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        'task_serializer': 'json',
        'accept_content': ['json'],
        'result_serializer': 'json',
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        'result_expires': 3600,  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è 1 —á–∞—Å
        'result_persistent': True,
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á
        'task_track_started': True,
        
        # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞–¥–∞—á (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê)
        'task_soft_time_limit': 300,  # 5 –º–∏–Ω—É—Ç –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç
        'task_time_limit': 360,       # 6 –º–∏–Ω—É—Ç –∂–µ—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
        'task_routes': get_task_routes(),
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ beat (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
        'beat_schedule': get_beat_schedule(),
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        'worker_send_task_events': True,
        'task_send_sent_event': True,
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        'worker_hijack_root_logger': False,
        'worker_log_color': False,
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É
        'broker_connection_retry_on_startup': True,
        'broker_connection_retry': True,
        'broker_connection_max_retries': 10,
        'broker_connection_timeout': 30,
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        'task_acks_late': True,        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        'task_reject_on_worker_lost': True,  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞
        'task_default_rate_limit': '100/m',  # –õ–∏–º–∏—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞
        'task_default_retry_delay': 60,  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        'task_max_retries': 3,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    celery_app.conf.update(base_config)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤—ã—Ö
    celery_app.conf.update(env_config)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã Celery –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    from .celery_signals import register_signals
    register_signals(celery_app)
    
    return celery_app

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
_configure_celery_app()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–¥–∞—á
def get_task_logger():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á Celery"""
    from celery.utils.log import get_task_logger
    return get_task_logger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Celery
def get_celery_app():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Celery"""
    return celery_app


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def check_system_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    from .health_checks import SystemHealthChecker
    checker = SystemHealthChecker()
    return checker.get_health_status()


if __name__ == "__main__":
    from .health_checks import SystemHealthChecker
    from .redis_manager import redis_manager
    
    print("üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –¥–ª—è HR Analysis")
    print("=" * 50)
    print(f"Broker URL: {redis_manager.get_connection_string()}")
    print(f"Environment: {ENVIRONMENT}")
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in env_config.items():
        print(f"  ‚Ä¢ {key}: {value}")
    print(f"–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–¥–∞—á:")
    for module in celery_app.conf.include:
        print(f"  ‚Ä¢ {module}")
    
    print("\n" + "=" * 50)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã
    health_checker = SystemHealthChecker()
    health_checker.print_health_status()
