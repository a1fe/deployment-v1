"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –¥–ª—è —Å–∏—Å—Ç–µ–º—ã HR Analysis

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ celery_app.py.
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
"""

import os
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä Celery
try:
    from .celery_app import celery_app, get_celery_app
except ImportError:
    # Fallback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    from celery_app import celery_app, get_celery_app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from .logging_config import setup_celery_logging
except ImportError:
    # Fallback
    from logging_config import setup_celery_logging
logger = setup_celery_logging()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–¥–∞—á
def get_task_logger():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á Celery"""
    from celery.utils.log import get_task_logger
    return get_task_logger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def check_system_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from .health_checks import SystemHealthChecker
    except ImportError:
        from health_checks import SystemHealthChecker
    checker = SystemHealthChecker()
    return checker.get_health_status()

def get_registered_tasks():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    app = get_celery_app()
    return list(app.tasks.keys())

def verify_task_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–¥–∞—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"""
    app = get_celery_app()
    expected_tasks = [
        'tasks.fillout_tasks.fetch_resume_data',
        'tasks.fillout_tasks.fetch_company_data',
        'tasks.parsing_tasks.parse_resume_text',
        'tasks.parsing_tasks.parse_job_text',
        'tasks.embedding_tasks.generate_resume_embeddings',
        'tasks.embedding_tasks.generate_job_embeddings',
        'tasks.reranking_tasks.rerank_resumes_for_job',
        'tasks.reranking_tasks.rerank_jobs_for_resume',
        'tasks.workflows.run_full_processing_pipeline'
    ]
    
    registered_tasks = get_registered_tasks()
    missing_tasks = []
    available_tasks = []
    
    for task_name in expected_tasks:
        if task_name in registered_tasks:
            available_tasks.append(task_name)
        else:
            missing_tasks.append(task_name)
    
    return {
        'available_tasks': available_tasks,
        'missing_tasks': missing_tasks,
        'total_registered': len(registered_tasks)
    }


if __name__ == "__main__":
    try:
        from .health_checks import SystemHealthChecker
        from .redis_manager import redis_manager
    except ImportError:
        from health_checks import SystemHealthChecker  
        from redis_manager import redis_manager
    
    print("üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –¥–ª—è HR Analysis")
    print("=" * 50)
    print(f"Broker URL: {redis_manager.get_connection_string()}")
    print(f"Environment: {ENVIRONMENT}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
    task_info = verify_task_modules()
    print(f"\n–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {task_info['total_registered']}")
    print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á: {len(task_info['available_tasks'])}")
    print(f"  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á: {len(task_info['missing_tasks'])}")
    
    if task_info['available_tasks']:
        print(f"\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for task in task_info['available_tasks']:
            print(f"  ‚Ä¢ {task}")
    
    if task_info['missing_tasks']:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:")
        for task in task_info['missing_tasks']:
            print(f"  ‚Ä¢ {task}")
    
    print("\n" + "=" * 50)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã
    health_checker = SystemHealthChecker()
    health_checker.print_health_status()
