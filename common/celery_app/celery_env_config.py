"""
Environment-specific configuration for Celery
"""

import os
from typing import Dict, Any
from .queue_names import FILLOUT_PROCESSING_QUEUE, TEXT_PROCESSING_QUEUE, EMBEDDINGS_QUEUE, RERANKING_QUEUE, ORCHESTRATION_QUEUE


def get_environment_config(environment: str | None = None) -> Dict[str, Any]:
    """Get environment-specific Celery configuration"""
    if environment is None:
        environment = os.getenv('ENVIRONMENT', 'development')
    
    configs = {
        'production': {
            'task_always_eager': False,
            'task_eager_propagates': False,
            'worker_concurrency': 4,
            'task_compression': 'gzip',
            'worker_prefetch_multiplier': 1,
            'worker_max_tasks_per_child': 1000,
            'task_time_limit': 30 * 60,  # 30 minutes
            'task_soft_time_limit': 25 * 60,  # 25 minutes
        },
        'testing': {
            'task_always_eager': True,
            'task_eager_propagates': True,
            'worker_concurrency': 1,
            'task_time_limit': 5 * 60,  # 5 minutes for tests
        },
        'development': {
            'task_always_eager': False,
            'task_eager_propagates': False,
            'worker_concurrency': 2,
            'task_time_limit': 15 * 60,  # 15 minutes
            'task_soft_time_limit': 12 * 60,  # 12 minutes
        }
    }
    
    return configs.get(environment, configs['development'])


def get_task_routes() -> Dict[str, Dict[str, str]]:
    """
    Get task routing configuration with conditional GPU support.
    
    –ï—Å–ª–∏ GPU_INSTANCE_NAME –Ω–∞—Å—Ç—Ä–æ–µ–Ω - GPU –∑–∞–¥–∞—á–∏ –∏–¥—É—Ç –Ω–∞ GPU-–æ—á–µ—Ä–µ–¥–∏
    –ï—Å–ª–∏ –Ω–µ—Ç - GPU –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ CPU-–æ—á–µ—Ä–µ–¥—è—Ö
    
    ‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö workflow):
    - –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ workflow
    - –ó–∞–¥–∞—á–∏ Fillout (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
    - –ó–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (—É—Å–ª–æ–≤–Ω–æ GPU/CPU)
    - –ó–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞ (matching)
    - –ó–∞–¥–∞—á–∏ —Å–∫–æ—Ä–∏–Ω–≥–∞ (reranking, —É—Å–ª–æ–≤–Ω–æ GPU/CPU)
    - –ó–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    """
    gpu_enabled = bool(os.environ.get('GPU_INSTANCE_NAME'))
    
    # –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    routes = {
        # Workflow –∑–∞–¥–∞—á–∏ (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è)
        'tasks.workflows.*': {'queue': ORCHESTRATION_QUEUE},

        # Fillout –∑–∞–¥–∞—á–∏
        'tasks.fillout_tasks.*': {'queue': FILLOUT_PROCESSING_QUEUE},

        # Parsing –∑–∞–¥–∞—á–∏
        'tasks.parsing_tasks.*': {'queue': TEXT_PROCESSING_QUEUE},

        # Embedding –∑–∞–¥–∞—á–∏
        'tasks.embedding_tasks.*': {'queue': EMBEDDINGS_QUEUE},

        # Reranking –∑–∞–¥–∞—á–∏
        'tasks.reranking_tasks.*': {'queue': RERANKING_QUEUE},
    }
    
    return routes


def get_worker_configs() -> Dict[str, Dict[str, Any]]:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤–æ—Ä–∫–µ—Ä–∞ —Å —É—Å–ª–æ–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU.
    
    –ï—Å–ª–∏ GPU_INSTANCE_NAME –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è GPU –≤–æ—Ä–∫–µ—Ä–æ–≤
    –ï—Å–ª–∏ –Ω–µ—Ç - –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ CPU –≤–æ—Ä–∫–µ—Ä–∞—Ö
    """
    gpu_enabled = bool(os.environ.get('GPU_INSTANCE_NAME'))
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã)
    configs = {
        # üì• –í–æ—Ä–∫–µ—Ä –¥–ª—è Fillout API
        'fillout': {
            'concurrency': 2,
            'prefetch_multiplier': 1,
            'max_tasks_per_child': 100,
            'time_limit': 180,
            'soft_time_limit': 150,
        },
        
        # üîç –í–æ—Ä–∫–µ—Ä –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        'search_basic': {
            'concurrency': 2,
            'prefetch_multiplier': 1,
            'max_tasks_per_child': 100,
            'time_limit': 300,
            'soft_time_limit': 240,
        },
        
        # üíæ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
        'default': {
            'concurrency': 2,
            'prefetch_multiplier': 2,
            'max_tasks_per_child': 500,
            'time_limit': 300,
            'soft_time_limit': 240,
        },
    }
    
    # –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è GPU
    if gpu_enabled:
        # GPU —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ GPU –≤–æ—Ä–∫–µ—Ä—ã
        configs.update({
            'embeddings_gpu': {
                'concurrency': 1,  # GPU –∑–∞–¥–∞—á–∏ - —Ç–æ–ª—å–∫–æ 1 –ø—Ä–æ—Ü–µ—Å—Å
                'prefetch_multiplier': 1,
                'max_tasks_per_child': 50,
                'time_limit': 600,
                'soft_time_limit': 540,
            },
            'scoring_tasks': {
                'concurrency': 1,  # –°–∫–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ - 1 –ø—Ä–æ—Ü–µ—Å—Å
                'prefetch_multiplier': 1,
                'max_tasks_per_child': 50,
                'time_limit': 300,
                'soft_time_limit': 240,
            },
        })
    
    return configs


def get_beat_schedule() -> Dict[str, Dict[str, Any]]:
    """Get periodic task schedule configuration"""
    return {
        # üîó –¶–ï–ü–û–ß–ö–ê A: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ (–≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø–∞—Ä—Å–∏–Ω–≥, GPU –∞–Ω–∞–ª–∏–∑) - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        'resume-processing-chain': {
            'task': 'tasks.workflows.resume_processing_chain',
            'schedule': 1800.0,  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            'options': {
                'queue': 'default',
                'priority': 8  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        },
        
        # üîó –¶–ï–ü–û–ß–ö–ê B: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π (–≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø–∞—Ä—Å–∏–Ω–≥, GPU –∞–Ω–∞–ª–∏–∑) - –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç
        'job-processing-chain': {
            'task': 'tasks.workflows.job_processing_chain',
            'schedule': 2700.0,  # –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç
            'options': {
                'queue': 'default',
                'priority': 8  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        },
        
        # üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è GPU —Å–µ—Ä–≤–µ—Ä–∞ - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        'gpu-health-check': {
            'task': 'tasks.gpu_tasks.gpu_health_check',
            'schedule': 900.0,  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            'options': {
                'queue': 'system',
                'priority': 3  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        },
        
        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ GPU —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        'gpu-server-maintenance': {
            'task': 'tasks.gpu_tasks.check_and_start_gpu_server',
            'schedule': 7200.0,  # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            'args': ['maintenance'],
            'options': {
                'queue': 'system',
                'priority': 5  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        },
        
        # üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ - –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        'cleanup-embeddings': {
            'task': 'tasks.embedding_tasks.cleanup_embeddings',
            'schedule': 86400.0,  # –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            'options': {
                'queue': 'default',
                'priority': 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        }
    }
