"""
Environment-specific configuration for Celery
"""

import os
from typing import Dict, Any
from .queue_names import (
    FILLOUT_PROCESSING_QUEUE, 
    TEXT_PROCESSING_QUEUE, 
    EMBEDDINGS_QUEUE, 
    RERANKING_QUEUE, 
    ORCHESTRATION_QUEUE
)


def get_environment_config(environment: str | None = None) -> Dict[str, Any]:
    """Get environment-specific Celery configuration"""
    if environment is None:
        environment = os.getenv('ENVIRONMENT', 'development')
    
    configs = {
        'production': {
            'task_always_eager': False,
            'task_eager_propagates': False,
            'worker_concurrency': 4,
            'task_compression': 'gzip',
            'worker_prefetch_multiplier': 1,
            'worker_max_tasks_per_child': 1000,
            'task_time_limit': 30 * 60,  # 30 minutes
            'task_soft_time_limit': 25 * 60,  # 25 minutes
        },
        'testing': {
            'task_always_eager': True,
            'task_eager_propagates': True,
            'worker_concurrency': 1,
            'task_time_limit': 5 * 60,  # 5 minutes for tests
        },
        'development': {
            'task_always_eager': False,
            'task_eager_propagates': False,
            'worker_concurrency': 2,
            'task_time_limit': 15 * 60,  # 15 minutes
            'task_soft_time_limit': 12 * 60,  # 12 minutes
        }
    }
    
    return configs.get(environment, configs['development'])


def get_task_routes() -> Dict[str, Dict[str, str]]:
    """
    Get task routing configuration using the new business queue architecture.
    
    –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π:
    - fillout_processing: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - text_processing: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤
    - embeddings: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    - reranking: AI-—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - orchestration: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á
    """
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ
    routes = {
        # üîÑ Workflow –∑–∞–¥–∞—á–∏ (orchestration)
        'common.tasks.workflows.run_full_processing_pipeline': {'queue': ORCHESTRATION_QUEUE},
        'common.tasks.workflows.run_parsing_only': {'queue': ORCHESTRATION_QUEUE},
        'common.tasks.workflows.run_embeddings_only': {'queue': ORCHESTRATION_QUEUE},
        'common.tasks.workflows.run_reranking_only': {'queue': ORCHESTRATION_QUEUE},
        'common.tasks.workflows.launch_reranking_tasks': {'queue': ORCHESTRATION_QUEUE},
        
        # üìã Fillout –∑–∞–¥–∞—á–∏ (fillout_processing)
        'common.tasks.fillout_tasks.fetch_resume_data': {'queue': FILLOUT_PROCESSING_QUEUE},
        'common.tasks.fillout_tasks.fetch_company_data': {'queue': FILLOUT_PROCESSING_QUEUE},
        
        # ÔøΩ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∏ (text_processing)
        'common.tasks.parsing_tasks.parse_resume_text': {'queue': TEXT_PROCESSING_QUEUE},
        'common.tasks.parsing_tasks.parse_job_text': {'queue': TEXT_PROCESSING_QUEUE},
        
        # üß† Embedding –∑–∞–¥–∞—á–∏ (embeddings)
        'common.tasks.embedding_tasks.generate_resume_embeddings': {'queue': EMBEDDINGS_QUEUE},
        'common.tasks.embedding_tasks.generate_job_embeddings': {'queue': EMBEDDINGS_QUEUE},
        'common.tasks.embedding_tasks.search_similar_resumes': {'queue': EMBEDDINGS_QUEUE},
        'common.tasks.embedding_tasks.search_similar_jobs': {'queue': EMBEDDINGS_QUEUE},
        'common.tasks.embedding_tasks.generate_all_embeddings': {'queue': EMBEDDINGS_QUEUE},
        
        # üéØ Reranking –∑–∞–¥–∞—á–∏ (reranking)
        'common.tasks.reranking_tasks.rerank_jobs_for_resume': {'queue': RERANKING_QUEUE},
        'common.tasks.reranking_tasks.rerank_resumes_for_job': {'queue': RERANKING_QUEUE},
    }
    
    return routes


def get_worker_configs() -> Dict[str, Dict[str, Any]]:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤–æ—Ä–∫–µ—Ä–∞ —Å –Ω–æ–≤–æ–π –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –æ—á–µ—Ä–µ–¥–µ–π.
    """
    
    configs = {
        # üì• –í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        'fillout_processing': {
            'concurrency': 2,
            'prefetch_multiplier': 1,
            'max_tasks_per_child': 100,
            'time_limit': 180,
            'soft_time_limit': 150,
        },
        
        # ÔøΩ –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤
        'text_processing': {
            'concurrency': 2,
            'prefetch_multiplier': 1,
            'max_tasks_per_child': 100,
            'time_limit': 300,
            'soft_time_limit': 240,
        },
        
        # üß† –í–æ—Ä–∫–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        'embeddings': {
            'concurrency': 2,
            'prefetch_multiplier': 1,
            'max_tasks_per_child': 50,
            'time_limit': 600,
            'soft_time_limit': 540,
        },
        
        # üéØ –í–æ—Ä–∫–µ—Ä –¥–ª—è AI-—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        'reranking': {
            'concurrency': 1,  # –û–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è AI –∑–∞–¥–∞—á
            'prefetch_multiplier': 1,
            'max_tasks_per_child': 50,
            'time_limit': 300,
            'soft_time_limit': 240,
        },
        
        # üîÑ –í–æ—Ä–∫–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workflow –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        'orchestration': {
            'concurrency': 2,
            'prefetch_multiplier': 2,
            'max_tasks_per_child': 500,
            'time_limit': 300,
            'soft_time_limit': 240,
        },
    }
    
    return configs


def get_beat_schedule() -> Dict[str, Dict[str, Any]]:
    """Get periodic task schedule configuration"""
    return {
        # üîó –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        'full-processing-pipeline': {
            'task': 'common.tasks.workflows.run_full_processing_pipeline',
            'schedule': 1800.0,  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            'options': {
                'queue': ORCHESTRATION_QUEUE,
                'priority': 8  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        },
        
        # ÔøΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Fillout - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        'fetch-resume-data': {
            'task': 'common.tasks.fillout_tasks.fetch_resume_data',
            'schedule': 900.0,  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            'options': {
                'queue': FILLOUT_PROCESSING_QUEUE,
                'priority': 7
            }
        },
        
        # üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π - –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
        'fetch-company-data': {
            'task': 'common.tasks.fillout_tasks.fetch_company_data',
            'schedule': 3600.0,  # –∫–∞–∂–¥—ã–π —á–∞—Å
            'options': {
                'queue': FILLOUT_PROCESSING_QUEUE,
                'priority': 5
            }
        },
        
        # üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ - –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç
        'generate-all-embeddings': {
            'task': 'common.tasks.embedding_tasks.generate_all_embeddings',
            'schedule': 2700.0,  # –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç
            'options': {
                'queue': EMBEDDINGS_QUEUE,
                'priority': 6
            }
        },
        
        # üéØ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        'launch-reranking-tasks': {
            'task': 'common.tasks.workflows.launch_reranking_tasks',
            'schedule': 7200.0,  # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            'options': {
                'queue': ORCHESTRATION_QUEUE,
                'priority': 5
            }
        }
    }
