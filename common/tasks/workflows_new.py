"""
–¶–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö HR Analysis
"""

from celery import chain, group, chord
from celery.utils.log import get_task_logger
from typing import Dict, List, Any, Optional
from datetime import datetime
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Celery
try:
    from ..celery_app.celery_app import celery_app as app
except ImportError:
    from celery_app.celery_app import celery_app as app

logger = get_task_logger(__name__)


@app.task(
    bind=True, 
    name='common.tasks.workflows.run_full_processing_pipeline',
    soft_time_limit=2400,  # 40 –º–∏–Ω—É—Ç
    time_limit=2700,       # 45 –º–∏–Ω—É—Ç
    max_retries=3
)
def run_full_processing_pipeline(self) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö HR Analysis
    
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Fillout
    2. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    4. –ü–æ–∏—Å–∫ –∏ —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
    5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
    """
    logger.info("üîó –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö HR Analysis")
    
    try:
        results = {
            'status': 'started',
            'timestamp': datetime.now().isoformat(),
            'steps': []
        }
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Fillout
        logger.info("üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Fillout")
        resume_result = app.send_task(
            'common.tasks.fillout_tasks.fetch_resume_data'
        ).get(timeout=300)
        results['steps'].append({
            'step': 'fetch_resume_data',
            'status': 'completed',
            'result': resume_result
        })
        
        company_result = app.send_task(
            'common.tasks.fillout_tasks.fetch_company_data'
        ).get(timeout=300)
        results['steps'].append({
            'step': 'fetch_company_data',
            'status': 'completed',
            'result': company_result
        })
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        logger.info("üß† –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        embeddings_result = app.send_task(
            'common.tasks.embedding_tasks.generate_all_embeddings'
        ).get(timeout=600)
        results['steps'].append({
            'step': 'generate_all_embeddings',
            'status': 'completed',
            'result': embeddings_result
        })
        
        # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("üéØ –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        reranking_result = app.send_task(
            'common.tasks.workflows.launch_reranking_tasks'
        ).get(timeout=900)
        results['steps'].append({
            'step': 'launch_reranking_tasks',
            'status': 'completed',
            'result': reranking_result
        })
        
        results['status'] = 'completed'
        results['total_time'] = (datetime.now() - datetime.fromisoformat(results['timestamp'])).total_seconds()
        
        logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {results['total_time']} —Å–µ–∫—É–Ω–¥")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }


@app.task(
    bind=True,
    name='common.tasks.workflows.run_parsing_only',
    soft_time_limit=600,
    time_limit=900,
    max_retries=2
)
def run_parsing_only(self) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á"""
    logger.info("üìù –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á")
    
    try:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á
        parse_tasks = group([
            app.signature('common.tasks.parsing_tasks.parse_resume_text'),
            app.signature('common.tasks.parsing_tasks.parse_job_text')
        ])
        
        results = parse_tasks.apply_async()
        parsed_results = results.get(timeout=600)
        
        logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        return {
            'status': 'completed',
            'results': parsed_results,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á–∞—Ö: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }


@app.task(
    bind=True,
    name='common.tasks.workflows.run_embeddings_only',
    soft_time_limit=1200,
    time_limit=1800,
    max_retries=2
)
def run_embeddings_only(self) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    logger.info("üß† –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    try:
        result = app.send_task('common.tasks.embedding_tasks.generate_all_embeddings')
        embeddings_result = result.get(timeout=1200)
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        return {
            'status': 'completed',
            'result': embeddings_result,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–∞—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }


@app.task(
    bind=True,
    name='common.tasks.workflows.run_reranking_only',
    soft_time_limit=600,
    time_limit=900,
    max_retries=2
)
def run_reranking_only(self) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    try:
        result = app.send_task('common.tasks.workflows.launch_reranking_tasks')
        reranking_result = result.get(timeout=600)
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        return {
            'status': 'completed',
            'result': reranking_result,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–∞—Ö —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }


@app.task(
    bind=True,
    name='common.tasks.workflows.launch_reranking_tasks',
    soft_time_limit=600,
    time_limit=900,
    max_retries=2
)
def launch_reranking_tasks(self) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    try:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        rerank_tasks = group([
            app.signature('common.tasks.reranking_tasks.rerank_jobs_for_resume'),
            app.signature('common.tasks.reranking_tasks.rerank_resumes_for_job')
        ])
        
        results = rerank_tasks.apply_async()
        rerank_results = results.get(timeout=600)
        
        logger.info("‚úÖ –ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return {
            'status': 'completed',
            'results': rerank_results,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞—á —Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }
