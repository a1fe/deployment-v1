"""
–¶–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

–¶–µ–ø–æ—á–∫–∞ A: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
–¶–µ–ø–æ—á–∫–∞ B: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
"""

from celery import chain, group, chord
from celery.utils.log import get_task_logger
from typing import Dict, List, Any, Optional
from datetime import datetime
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Celery
try:
    from ..celery_app.celery_app import celery_app as app
except ImportError:
    from celery_app.celery_app import celery_app as app

logger = get_task_logger(__name__)


# –°—Ç–∞—Ä—ã–µ workflow —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏

@app.task(
    bind=True, 
    name='common.tasks.workflows.run_full_processing_pipeline',
    soft_time_limit=2400,  # 40 –º–∏–Ω—É—Ç
    time_limit=2700,       # 45 –º–∏–Ω—É—Ç
    max_retries=3
)
def run_full_processing_pipeline(self) -> Dict[str, Any]:
    """
    –¶–ï–ü–û–ß–ö–ê A: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ
    
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
    1. pull_fillout_resumes (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
    2. parse_documents (–ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ)
    3. check_and_start_gpu_server (–ø—Ä–æ–≤–µ—Ä–∫–∞ GPU)
    4. generate_resume_embeddings
    5. batch_find_matches_for_resumes
    6. rerank_resume_matches
    7. ai_analysis (–µ—Å–ª–∏ GPU –¥–æ—Å—Ç—É–ø–µ–Ω)
    8. save_analysis_results
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
    """
    logger.info("üîó –¶–µ–ø–æ—á–∫–∞ A: –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ")
    
    try:
        # –®–∞–≥ A.0: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –∏–∑ Fillout
        logger.info("üì• A.0: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –∏–∑ Fillout API")
        fillout_result = app.send_task(
            'tasks.fillout_tasks.pull_fillout_resumes',
            queue='fillout'
        ).get(timeout=300)
        
        if not fillout_result or fillout_result.get('status') != 'completed':
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Fillout")
            return {
                'status': 'no_data',
                'message': '–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Fillout',
                'chain': 'A'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º submission_ids –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Fillout
        cv_data = fillout_result.get('cv_data', {})
        submission_ids = cv_data.get('submission_ids', [])
        
        if not submission_ids:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç submission_ids –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return {
                'status': 'no_data',
                'message': '–ù–µ—Ç submission_ids –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'chain': 'A'
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        documents_data = []
        for submission_id in submission_ids:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL —Ä–µ–∑—é–º–µ –∏–∑ submission
            documents_data.append({
                'id': submission_id,
                'submission_id': submission_id,
                'type': 'resume'
            })
        
        # –®–∞–≥ A.1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—é–º–µ
        logger.info(f"üìÑ A.1: –ü–∞—Ä—Å–∏–Ω–≥ {len(documents_data)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—é–º–µ")
        parse_result = app.send_task(
            'tasks.parse_tasks.parse_documents',
            args=[documents_data, 'resume'],
            queue='cpu_intensive'
        ).get(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
        
        if parse_result.get('status') != 'completed':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—é–º–µ")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                'chain': 'A'
            }
        
        # –®–∞–≥ A.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ GPU —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üîç A.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU —Å–µ—Ä–≤–µ—Ä–∞")
        gpu_check_result = app.send_task(
            'tasks.gpu_tasks.check_and_start_gpu_server',
            args=['resume_processing'],
            queue='system'
        ).get(timeout=360)  # 6 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∑–∞–ø—É—Å–∫ GPU
        
        gpu_available = gpu_check_result.get('status') in ['available', 'started_and_available']
        
        # –®–∞–≥ A.3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ä–µ–∑—é–º–µ
        logger.info(f"üìä A.3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(submission_ids)} —Ä–µ–∑—é–º–µ")
        if gpu_available:
            embeddings_result = app.send_task(
                'tasks.embedding_tasks.generate_resume_embeddings',
                args=[submission_ids],
                queue='embeddings_gpu'
            ).get(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        else:
            logger.warning("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            embeddings_result = app.send_task(
                'tasks.embedding_tasks.generate_resume_embeddings_cpu',
                args=[submission_ids],
                queue='embeddings_cpu'
            ).get(timeout=1200)  # 20 –º–∏–Ω—É—Ç –Ω–∞ CPU —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        
        if embeddings_result.get('status') != 'success':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ä–µ–∑—é–º–µ")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
                'chain': 'A'
            }
        
        # –®–∞–≥ A.4: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ
        logger.info(f"üîç A.4: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ")
        search_result = app.send_task(
            'tasks.matching.batch_find_matches_for_resumes',
            args=[submission_ids],
            queue='search_basic'
        ).get(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–∏—Å–∫
        
        if search_result.get('status') != 'success':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π',
                'chain': 'A'
            }
        
        # –®–∞–≥ A.5: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        matches = search_result.get('matches', [])
        if matches:
            logger.info(f"üéØ A.5: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ job_id –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            matches_by_job = {}
            for match in matches:
                job_id = match.get('job_id')
                if job_id:
                    if job_id not in matches_by_job:
                        matches_by_job[job_id] = []
                    matches_by_job[job_id].append(match)
            
            rerank_results = []
            for job_id, job_matches in matches_by_job.items():
                rerank_result = app.send_task(
                    'tasks.scoring_tasks.rerank_resume_matches',
                    args=[job_id, job_matches],
                    queue='scoring_tasks'
                ).get(timeout=180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥
                rerank_results.append(rerank_result)
        else:
            logger.info("‚ÑπÔ∏è A.5: –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")
            rerank_results = []
            matches_by_job = {}
        
        # –®–∞–≥ A.6: AI –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ GPU –¥–æ—Å—Ç—É–ø–µ–Ω)
        ai_results = []
        if gpu_available and rerank_results:
            logger.info("ü§ñ A.6: AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
            ai_documents = {
                'documents': [],
                'type': 'resume_job_matching'
            }
            
            for rerank_result in rerank_results:
                if rerank_result.get('status') == 'success':
                    ai_documents['documents'].extend(rerank_result.get('matches', []))
            
            if ai_documents['documents']:
                ai_result = app.send_task(
                    'tasks.gpu_tasks.ai_analysis',
                    args=[ai_documents, 'match_scoring'],
                    queue='ai_analysis'
                ).get(timeout=900)  # 15 –º–∏–Ω—É—Ç –Ω–∞ AI –∞–Ω–∞–ª–∏–∑
                
                if ai_result.get('status') == 'completed':
                    ai_results.append(ai_result)
                    logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        
        # –®–∞–≥ A.7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        if rerank_results:
            logger.info("üíæ A.7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            for i, rerank_result in enumerate(rerank_results):
                if rerank_result.get('status') == 'success':
                    job_id = rerank_result.get('job_id')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    final_result = rerank_result.copy()
                    if ai_results and i < len(ai_results):
                        final_result['ai_analysis'] = ai_results[i]
                    
                    app.send_task(
                        'tasks.analysis_tasks.save_analysis_results',
                        args=[job_id, final_result, 'resume_processing'],
                        queue='default'
                    )
        
        logger.info("‚úÖ –¶–µ–ø–æ—á–∫–∞ A –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return {
            'status': 'success',
            'message': f'–¶–µ–ø–æ—á–∫–∞ A –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(submission_ids)} —Ä–µ–∑—é–º–µ',
            'chain': 'A',
            'steps_completed': {
                'fillout_data': True,
                'document_parsing': True,
                'gpu_check': True,
                'embeddings': True,
                'matching': True,
                'reranking': len(rerank_results) > 0,
                'ai_analysis': len(ai_results) > 0,
                'results_saved': True
            },
            'stats': {
                'resumes_processed': len(submission_ids),
                'matches_found': len(matches),
                'jobs_matched': len(matches_by_job),
                'rerank_results': len(rerank_results),
                'ai_results': len(ai_results)
            },
            'processed_at': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ A: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ A {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise
        
        if search_result.get('status') != 'success':
            logger.warning("‚ö†Ô∏è –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return {
                'status': 'no_matches',
                'message': '–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                'chain': 'A'
            }
        
        # –®–∞–≥ A.3: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ —Ä–µ–∑—é–º–µ
        matches = search_result.get('matches', [])
        if matches:
            logger.info(f"üéØ A.3: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º send_task –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            rerank_result = app.send_task(
                'tasks.scoring_tasks.rerank_resume_matches',
                args=[matches],
                queue='scoring_gpu'
            ).get(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º matches –ø–æ job_id –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            matches_by_job = {}
            for match in matches:
                job_id = match.get('job_id')
                if job_id:
                    if job_id not in matches_by_job:
                        matches_by_job[job_id] = []
                    matches_by_job[job_id].append(match)
            
            rerank_results = []
            for job_id, job_matches in matches_by_job.items():
                rerank_result = rerank_resume_matches.apply_async(
                    args=[job_id, job_matches],
                    queue='scoring_tasks'
                ).get(timeout=180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥
                rerank_results.append(rerank_result)
        else:
            logger.info("‚ÑπÔ∏è A.3: –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")
            rerank_results = []
        
        # –®–∞–≥ A.4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç)
        if rerank_results:
            logger.info("üíæ A.4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            for rerank_result in rerank_results:
                if rerank_result.get('status') == 'success':
                    job_id = rerank_result.get('job_id')
                    app.send_task(
                        'tasks.analysis_tasks.save_reranker_analysis_results',
                        args=[job_id, rerank_result],
                        queue='default'
                    )
        
        logger.info("‚úÖ –¶–µ–ø–æ—á–∫–∞ A –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return {
            'status': 'success',
            'message': f'–¶–µ–ø–æ—á–∫–∞ A –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(submission_ids)} —Ä–µ–∑—é–º–µ',
            'chain': 'A',
            'submission_ids': submission_ids,
            'matches_found': len(matches),
            'rerank_results': len(rerank_results),
            'processed_at': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ A: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ A {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise


@app.task(
    bind=True, 
    name='tasks.workflows.job_processing_chain', 
    soft_time_limit=2400,  # 40 –º–∏–Ω—É—Ç  
    time_limit=2700,       # 45 –º–∏–Ω—É—Ç
    max_retries=3
)
def job_processing_chain(self) -> Dict[str, Any]:
    """
    –¶–ï–ü–û–ß–ö–ê B: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
    1. pull_fillout_jobs (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
    2. parse_documents (–ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π)
    3. check_and_start_gpu_server (–ø—Ä–æ–≤–µ—Ä–∫–∞ GPU)
    4. generate_job_embeddings
    5. batch_find_matches_for_jobs
    6. rerank_job_matches
    7. ai_analysis (–µ—Å–ª–∏ GPU –¥–æ—Å—Ç—É–ø–µ–Ω)
    8. save_analysis_results
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
    """
    logger.info("üîó –¶–µ–ø–æ—á–∫–∞ B: –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    try:
        # –®–∞–≥ B.0: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Fillout
        logger.info("üì• B.0: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Fillout API")
        fillout_result = app.send_task(
            'tasks.fillout_tasks.pull_fillout_jobs',
            queue='fillout'
        ).get(timeout=300)
        
        if not fillout_result or fillout_result.get('status') != 'completed':
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Fillout")
            return {
                'status': 'no_data',
                'message': '–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Fillout',
                'chain': 'B'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º job_ids –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Fillout
        company_data = fillout_result.get('company_data', {})
        job_ids = company_data.get('job_ids', [])
        
        if not job_ids:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç job_ids –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return {
                'status': 'no_data',
                'message': '–ù–µ—Ç job_ids –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'chain': 'B'
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        documents_data = []
        for job_id in job_ids:
            documents_data.append({
                'id': job_id,
                'job_id': job_id,
                'type': 'job_description'
            })
        
        # –®–∞–≥ B.1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π
        logger.info(f"üìÑ B.1: –ü–∞—Ä—Å–∏–Ω–≥ {len(documents_data)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π")
        parse_result = app.send_task(
            'tasks.parse_tasks.parse_documents',
            args=[documents_data, 'job_description'],
            queue='cpu_intensive'
        ).get(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
        
        if parse_result.get('status') != 'completed':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                'chain': 'B'
            }
        
        # –®–∞–≥ B.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ GPU —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üîç B.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU —Å–µ—Ä–≤–µ—Ä–∞")
        gpu_check_result = app.send_task(
            'tasks.gpu_tasks.check_and_start_gpu_server',
            args=['job_processing'],
            queue='system'
        ).get(timeout=360)  # 6 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∑–∞–ø—É—Å–∫ GPU
        
        gpu_available = gpu_check_result.get('status') in ['available', 'started_and_available']
        
        # –®–∞–≥ B.3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π
        logger.info(f"üìä B.3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(job_ids)} –≤–∞–∫–∞–Ω—Å–∏–π")
        if gpu_available:
            embeddings_result = app.send_task(
                'tasks.embedding_tasks.generate_job_embeddings',
                args=[job_ids],
                queue='embeddings_gpu'
            ).get(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        else:
            logger.warning("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            embeddings_result = app.send_task(
                'tasks.embedding_tasks.generate_job_embeddings_cpu',
                args=[job_ids],
                queue='embeddings_cpu'
            ).get(timeout=1200)  # 20 –º–∏–Ω—É—Ç –Ω–∞ CPU —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        
        if embeddings_result.get('status') != 'success':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
                'chain': 'B'
            }
        
        # –®–∞–≥ B.4: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
        logger.info(f"üîç B.4: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π")
        search_result = app.send_task(
            'tasks.matching.batch_find_matches_for_jobs',
            args=[job_ids],
            queue='search_basic'
        ).get(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–∏—Å–∫
        
        if search_result.get('status') != 'success':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π',
                'chain': 'B'
            }
        
        # –®–∞–≥ B.5: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        matches = search_result.get('matches', [])
        if matches:
            logger.info(f"üéØ B.5: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ submission_id –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            matches_by_submission = {}
            for match in matches:
                submission_id = match.get('submission_id')
                if submission_id:
                    if submission_id not in matches_by_submission:
                        matches_by_submission[submission_id] = []
                    matches_by_submission[submission_id].append(match)
            
            rerank_results = []
            for submission_id, submission_matches in matches_by_submission.items():
                rerank_result = app.send_task(
                    'tasks.scoring_tasks.rerank_job_matches',
                    args=[submission_id, submission_matches],
                    queue='scoring_tasks'
                ).get(timeout=180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥
                rerank_results.append(rerank_result)
        else:
            logger.info("‚ÑπÔ∏è B.5: –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")
            rerank_results = []
            matches_by_submission = {}
        
        # –®–∞–≥ B.6: AI –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ GPU –¥–æ—Å—Ç—É–ø–µ–Ω)
        ai_results = []
        if gpu_available and rerank_results:
            logger.info("ü§ñ B.6: AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
            ai_documents = {
                'documents': [],
                'type': 'job_candidate_matching'
            }
            
            for rerank_result in rerank_results:
                if rerank_result.get('status') == 'success':
                    ai_documents['documents'].extend(rerank_result.get('matches', []))
            
            if ai_documents['documents']:
                ai_result = app.send_task(
                    'tasks.gpu_tasks.ai_analysis',
                    args=[ai_documents, 'match_scoring'],
                    queue='ai_analysis'
                ).get(timeout=900)  # 15 –º–∏–Ω—É—Ç –Ω–∞ AI –∞–Ω–∞–ª–∏–∑
                
                if ai_result.get('status') == 'completed':
                    ai_results.append(ai_result)
                    logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        
        # –®–∞–≥ B.7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        if rerank_results:
            logger.info("üíæ B.7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            for i, rerank_result in enumerate(rerank_results):
                if rerank_result.get('status') == 'success':
                    submission_id = rerank_result.get('submission_id')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    final_result = rerank_result.copy()
                    if ai_results and i < len(ai_results):
                        final_result['ai_analysis'] = ai_results[i]
                    
                    app.send_task(
                        'tasks.analysis_tasks.save_analysis_results',
                        args=[submission_id, final_result, 'job_processing'],
                        queue='default'
                    )
        
        logger.info("‚úÖ –¶–µ–ø–æ—á–∫–∞ B –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return {
            'status': 'success',
            'message': f'–¶–µ–ø–æ—á–∫–∞ B –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(job_ids)} –≤–∞–∫–∞–Ω—Å–∏–π',
            'chain': 'B',
            'steps_completed': {
                'fillout_data': True,
                'document_parsing': True,
                'gpu_check': True,
                'embeddings': True,
                'matching': True,
                'reranking': len(rerank_results) > 0,
                'ai_analysis': len(ai_results) > 0,
                'results_saved': True
            },
            'stats': {
                'jobs_processed': len(job_ids),
                'matches_found': len(matches),
                'submissions_matched': len(matches_by_submission),
                'rerank_results': len(rerank_results),
                'ai_results': len(ai_results)
            },
            'processed_at': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ B: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ B {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise
    
    try:
        # –®–∞–≥ B.0: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Fillout
        logger.info("üì• B.0: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Fillout API")
        fillout_result = app.send_task(
            'tasks.fillout_tasks.pull_fillout_jobs',
            queue='fillout'
        ).get(timeout=300)
        
        if not fillout_result or fillout_result.get('status') != 'completed':
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Fillout")
            return {
                'status': 'no_data',
                'message': '–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Fillout',
                'chain': 'B'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º job_ids –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Fillout
        company_data = fillout_result.get('company_data', {})
        job_ids = company_data.get('job_ids', [])
        
        if not job_ids:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç job_ids –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            return {
                'status': 'no_data',
                'message': '–ù–µ—Ç job_ids –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'chain': 'B'
            }
        
        # –®–∞–≥ B.1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π
        logger.info(f"üìä B.1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(job_ids)} –≤–∞–∫–∞–Ω—Å–∏–π")
        embeddings_result = app.send_task(
            'tasks.embedding_tasks.generate_job_embeddings',
            args=[job_ids],
            queue='embeddings_gpu'
        ).get(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        
        if embeddings_result.get('status') != 'success':
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
                'chain': 'B'
            }
        
        # –®–∞–≥ B.2: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç)
        logger.info(f"üîç B.2: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π")
        search_result = app.send_task(
            'tasks.matching.batch_find_matches_for_jobs',
            args=[job_ids],
            queue='search_basic'
        ).get(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–∏—Å–∫
        
        if search_result.get('status') != 'success':
            logger.warning("‚ö†Ô∏è –ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return {
                'status': 'no_matches',
                'message': '–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                'chain': 'B'
            }
        
        # –®–∞–≥ B.3: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç)
        matches = search_result.get('matches', [])
        if matches:
            logger.info(f"üéØ B.3: –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º matches –ø–æ submission_id –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
            matches_by_submission = {}
            for match in matches:
                submission_id = match.get('submission_id')
                if submission_id:
                    if submission_id not in matches_by_submission:
                        matches_by_submission[submission_id] = []
                    matches_by_submission[submission_id].append(match)
            
            rerank_results = []
            for submission_id, submission_matches in matches_by_submission.items():
                rerank_result = app.send_task(
                    'tasks.scoring_tasks.rerank_job_matches',
                    args=[submission_id, submission_matches],
                    queue='scoring_tasks'
                ).get(timeout=180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥
                rerank_results.append(rerank_result)
        else:
            logger.info("‚ÑπÔ∏è B.3: –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")
            rerank_results = []
        
        # –®–∞–≥ B.4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç)
        if rerank_results:
            logger.info("üíæ B.4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            for rerank_result in rerank_results:
                if rerank_result.get('status') == 'success':
                    # –î–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π job_id –∏–∑ —Å–ø–∏—Å–∫–∞
                    job_id = job_ids[0] if job_ids else None
                    if job_id:
                        app.send_task(
                            'tasks.analysis_tasks.save_reranker_analysis_results',
                            args=[job_id, rerank_result],
                            queue='default'
                        )
        
        logger.info("‚úÖ –¶–µ–ø–æ—á–∫–∞ B –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return {
            'status': 'success',
            'message': f'–¶–µ–ø–æ—á–∫–∞ B –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(job_ids)} –≤–∞–∫–∞–Ω—Å–∏–π',
            'chain': 'B',
            'job_ids': job_ids,
            'matches_found': len(matches),
            'rerank_results': len(rerank_results),
            'processed_at': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ B: {e}")
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ B {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise


# –ó–∞–¥–∞—á–∞ scheduled_data_processing —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä—è–º—ã–µ —Ü–µ–ø–æ—á–∫–∏
