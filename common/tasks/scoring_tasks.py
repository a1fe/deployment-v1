"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é BGE-M3 Reranker –º–æ–¥–µ–ª–∏

–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–Ω—ã—Ö scores
–†–∞–±–æ—Ç–∞–µ—Ç —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –∏–∑ ChromaDB –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

from datetime import datetime
from typing import Dict, List, Optional, Any
from celery.utils.log import get_task_logger
from database.operations.candidate_operations import SubmissionCRUD
from database.operations.company_operations import JobCRUD
from utils.reranker_config import get_reranker_client
from utils.chroma_config import chroma_client, ChromaConfig
from tasks.task_utils import get_db_session, safe_uuid_convert, serialize_for_json, mask_sensitive_data

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Celery app
from celery_app.celery_app import get_celery_app

app = get_celery_app()

logger = get_task_logger(__name__)


@app.task(
    bind=True, 
    name='tasks.scoring.rerank_resume_matches', 
    max_retries=3, 
    default_retry_delay=60,
    soft_time_limit=600,  # 10 –º–∏–Ω—É—Ç –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
    time_limit=720        # 12 –º–∏–Ω—É—Ç
)
def rerank_resume_matches(self, job_id: int, matches: List[Dict[str, Any]], 
                         top_k: int = 20, min_rerank_score: float = 0.3) -> Dict[str, Any]:
    """
    –°–ö–û–†–ò–ù–ì –†–ï–ó–Æ–ú–ï: –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é BGE-M3 Reranker
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ ChromaDB –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    Args:
        job_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
        matches: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞)
        top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ reranking (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        min_rerank_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π rerank score –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.3)
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å rerank_score –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    logger.info(f"üéØ –°–∫–æ—Ä–∏–Ω–≥ {len(matches)} —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id} —Å –ø–æ–º–æ—â—å—é BGE-M3")
    
    with get_db_session() as db:
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not matches:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞")
                return serialize_for_json({
                    'job_id': job_id,
                    'reranked_matches': [],
                    'total_reranked': 0,
                    'message': '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            job = JobCRUD.get_by_id(db, job_id)
            if not job:
                logger.error(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {job_id}")
                raise ValueError(f"–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {job_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChromaDB –∏ BGE-M3 Reranker
            if not chroma_client.health_check():
                logger.error("‚ùå ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                raise Exception("ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            reranker_client = get_reranker_client()
            if not reranker_client.health_check():
                logger.error("‚ùå BGE-M3 Reranker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                raise Exception("BGE-M3 Reranker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ChromaDB
            job_collection = chroma_client.get_or_create_collection(ChromaConfig.JOB_COLLECTION)
            resume_collection = chroma_client.get_or_create_collection(ChromaConfig.RESUME_COLLECTION)
            
            # –ò—â–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ ChromaDB
            job_prefix = f"job_{job_id}"
            job_results = job_collection.get(include=['embeddings', 'metadatas'])
            
            job_embedding = None
            for idx, job_id_str in enumerate(job_results['ids']):
                if job_id_str.startswith(job_prefix):
                    job_embedding = job_results['embeddings'][idx]
                    break
            
            if not job_embedding:
                logger.warning(f"‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ChromaDB")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ matches –±–µ–∑ reranking
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –±–µ–∑ BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥–∞")
                return serialize_for_json({
                    'job_id': job_id,
                    'job_title': job.title,
                    'reranked_matches': matches[:top_k],
                    'total_reranked': len(matches[:top_k]),
                    'message': '–≠–º–±–µ–¥–¥–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ä–µ–∑—é–º–µ –∏–∑ matches
            enhanced_matches = []
            for match in matches:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º submission_id –∏ chroma_id –∏–∑ match
                submission_id = match.get('submission_id')
                chroma_id = match.get('chroma_id')
                
                if not chroma_id:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å chroma_id –∏–∑ submission_id
                    if submission_id:
                        chroma_id = f"resume_{submission_id}"
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chroma_id –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {match}")
                        continue
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —Ä–µ–∑—é–º–µ –∏–∑ ChromaDB
                try:
                    resume_data = resume_collection.get(
                        ids=[chroma_id],
                        include=['embeddings', 'documents', 'metadatas']
                    )
                    
                    if resume_data['ids'] and resume_data['embeddings']:
                        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∫ match
                        enhanced_match = match.copy()
                        enhanced_match['embedding'] = resume_data['embeddings'][0]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                        if resume_data['documents'] and resume_data['documents'][0]:
                            enhanced_match['document'] = resume_data['documents'][0]
                        
                        enhanced_matches.append(enhanced_match)
                    else:
                        logger.warning(f"‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {chroma_id}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                        enhanced_matches.append(match)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è {chroma_id}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                    enhanced_matches.append(match)
            
            if not enhanced_matches:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                return serialize_for_json({
                    'job_id': job_id,
                    'job_title': job.title,
                    'reranked_matches': matches[:top_k],
                    'total_reranked': len(matches[:top_k]),
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
                })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º reranking —Å –ø–æ–º–æ—â—å—é BGE-M3
            logger.info(f"üîç –ó–∞–ø—É—Å–∫ BGE-M3 Reranker –¥–ª—è {len(enhanced_matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            reranked_matches = reranker_client.rerank_chroma_matches(job_embedding, enhanced_matches)
            
            if not reranked_matches:
                logger.warning("‚ö†Ô∏è BGE-M3 Reranker –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return serialize_for_json({
                    'job_id': job_id,
                    'job_title': job.title,
                    'reranked_matches': enhanced_matches[:top_k],
                    'total_reranked': len(enhanced_matches[:top_k]),
                    'message': 'Reranker –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ'
                })
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É rerank score
            filtered_matches = [
                match for match in reranked_matches 
                if match.get('rerank_score', 0) >= min_rerank_score
            ]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            final_matches = filtered_matches[:top_k]
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∫–æ—Ä–∏–Ω–≥–∞
            for match in final_matches:
                # –£–±–∏—Ä–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º)
                if 'embedding' in match:
                    del match['embedding']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                match['quality_metrics'] = {
                    'original_similarity': match.get('similarity', 0),
                    'rerank_score': match.get('rerank_score', 0),
                    'score_improvement': match.get('rerank_score', 0) - match.get('similarity', 0),
                    'is_reranked': True,
                    'reranker_model': 'BGE-M3',
                    'used_embeddings': True
                }
                
                # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'candidate_email' in match:
                    match['candidate_email'] = mask_sensitive_data(match['candidate_email'])
            
            logger.info(f"‚úÖ BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(final_matches)} –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'job_id': job_id,
                'job_title': job.title,
                'company_id': job.company_id,
                'reranked_matches': final_matches,
                'total_reranked': len(final_matches),
                'scoring_params': {
                    'top_k': top_k,
                    'min_rerank_score': min_rerank_score,
                    'reranker_model': 'BGE-M3',
                    'used_embeddings': True,
                    'max_token_length': 8192
                },
                'statistics': {
                    'original_matches': len(matches),
                    'enhanced_with_embeddings': len(enhanced_matches),
                    'after_reranking': len(reranked_matches),
                    'above_threshold': len(filtered_matches),
                    'final_results': len(final_matches)
                },
                'processed_at': datetime.utcnow().isoformat(),
                'message': f'BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(final_matches)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'
            }
            
            return serialize_for_json(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥–µ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id}: {str(e)}")
            # Retry –ª–æ–≥–∏–∫–∞
            if self.request.retries < self.max_retries:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
                raise self.retry(countdown=60 * (self.request.retries + 1))
            raise


@app.task(
    bind=True, 
    name='tasks.scoring.rerank_job_matches', 
    max_retries=3, 
    default_retry_delay=60,
    soft_time_limit=600,  # 10 –º–∏–Ω—É—Ç –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
    time_limit=720        # 12 –º–∏–Ω—É—Ç
)
def rerank_job_matches(self, submission_id: str, matches: List[Dict[str, Any]], 
                      top_k: int = 10, min_rerank_score: float = 0.3) -> Dict[str, Any]:
    """
    –°–ö–û–†–ò–ù–ì –í–ê–ö–ê–ù–°–ò–ô: –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–º–æ—â—å—é BGE-M3 Reranker
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ ChromaDB –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        matches: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
        top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ reranking (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        min_rerank_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π rerank score (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.3)
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å rerank_score –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    logger.info(f"üîç –°–∫–æ—Ä–∏–Ω–≥ {len(matches)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ {mask_sensitive_data(submission_id)}")
    
    with get_db_session() as db:
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not matches:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞")
                return serialize_for_json({
                    'submission_id': submission_id,
                    'reranked_matches': [],
                    'total_reranked': 0,
                    'message': '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞'
                })
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º submission_id
            submission_uuid = safe_uuid_convert(submission_id)
            if not submission_uuid:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π submission_id: {submission_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            submission = SubmissionCRUD.get_by_id(db, submission_uuid)
            if not submission:
                raise ValueError(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {submission_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChromaDB –∏ BGE-M3 Reranker
            if not chroma_client.health_check():
                logger.error("‚ùå ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                raise Exception("ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            reranker_client = get_reranker_client()
            if not reranker_client.health_check():
                logger.error("‚ùå BGE-M3 Reranker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                raise Exception("BGE-M3 Reranker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ChromaDB
            resume_collection = chroma_client.get_or_create_collection(ChromaConfig.RESUME_COLLECTION)
            job_collection = chroma_client.get_or_create_collection(ChromaConfig.JOB_COLLECTION)
            
            # –ò—â–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —Ä–µ–∑—é–º–µ –≤ ChromaDB
            resume_chroma_id = f"resume_{submission_id}"
            try:
                resume_data = resume_collection.get(
                    ids=[resume_chroma_id],
                    include=['embeddings', 'documents']
                )
                
                if not resume_data['ids'] or not resume_data['embeddings']:
                    logger.warning(f"‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ä–µ–∑—é–º–µ {submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ChromaDB")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ matches –±–µ–∑ reranking
                    return serialize_for_json({
                        'submission_id': submission_id,
                        'candidate_id': submission.candidate_id,
                        'reranked_matches': matches[:top_k],
                        'total_reranked': len(matches[:top_k]),
                        'message': '–≠–º–±–µ–¥–¥–∏–Ω–≥ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
                    })
                
                resume_embedding = resume_data['embeddings'][0]
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ {submission_id}: {e}")
                return serialize_for_json({
                    'submission_id': submission_id,
                    'candidate_id': submission.candidate_id,
                    'reranked_matches': matches[:top_k],
                    'total_reranked': len(matches[:top_k]),
                    'message': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ matches
            enhanced_matches = []
            for match in matches:
                job_id = match.get('job_id')
                if not job_id:
                    logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç job_id –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏: {match}")
                    continue
                
                # –ò—â–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏
                job_chroma_id = f"job_{job_id}"
                try:
                    job_data = job_collection.get(
                        ids=[job_chroma_id],
                        include=['embeddings', 'documents', 'metadatas']
                    )
                    
                    if job_data['ids'] and job_data['embeddings']:
                        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∫ match
                        enhanced_match = match.copy()
                        enhanced_match['embedding'] = job_data['embeddings'][0]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                        if job_data['documents'] and job_data['documents'][0]:
                            enhanced_match['document'] = job_data['documents'][0]
                        
                        enhanced_matches.append(enhanced_match)
                    else:
                        logger.warning(f"‚ö†Ô∏è –≠–º–±–µ–¥–¥–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                        enhanced_matches.append(match)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                    enhanced_matches.append(match)
            
            if not enhanced_matches:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π")
                return serialize_for_json({
                    'submission_id': submission_id,
                    'candidate_id': submission.candidate_id,
                    'reranked_matches': matches[:top_k],
                    'total_reranked': len(matches[:top_k]),
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤–∞–∫–∞–Ω—Å–∏–π'
                })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º reranking —Å –ø–æ–º–æ—â—å—é BGE-M3
            logger.info(f"üîç –ó–∞–ø—É—Å–∫ BGE-M3 Reranker –¥–ª—è {len(enhanced_matches)} –≤–∞–∫–∞–Ω—Å–∏–π")
            reranked_matches = reranker_client.rerank_chroma_matches(resume_embedding, enhanced_matches)
            
            if not reranked_matches:
                logger.warning("‚ö†Ô∏è BGE-M3 Reranker –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return serialize_for_json({
                    'submission_id': submission_id,
                    'candidate_id': submission.candidate_id,
                    'reranked_matches': enhanced_matches[:top_k],
                    'total_reranked': len(enhanced_matches[:top_k]),
                    'message': 'Reranker –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
                })
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É rerank score
            filtered_matches = [
                match for match in reranked_matches 
                if match.get('rerank_score', 0) >= min_rerank_score
            ]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            final_matches = filtered_matches[:top_k]
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∫–æ—Ä–∏–Ω–≥–∞
            for match in final_matches:
                # –£–±–∏—Ä–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if 'embedding' in match:
                    del match['embedding']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                match['quality_metrics'] = {
                    'original_similarity': match.get('similarity', 0),
                    'rerank_score': match.get('rerank_score', 0),
                    'score_improvement': match.get('rerank_score', 0) - match.get('similarity', 0),
                    'is_reranked': True,
                    'reranker_model': 'BGE-M3',
                    'used_embeddings': True
                }
            
            logger.info(f"‚úÖ BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(final_matches)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            
            result = {
                'submission_id': submission_id,
                'candidate_id': submission.candidate_id,
                'reranked_matches': final_matches,
                'total_reranked': len(final_matches),
                'scoring_params': {
                    'top_k': top_k,
                    'min_rerank_score': min_rerank_score,
                    'reranker_model': 'BGE-M3',
                    'used_embeddings': True,
                    'max_token_length': 8192
                },
                'statistics': {
                    'original_matches': len(matches),
                    'enhanced_with_embeddings': len(enhanced_matches),
                    'after_reranking': len(reranked_matches),
                    'above_threshold': len(filtered_matches),
                    'final_results': len(final_matches)
                },
                'processed_at': datetime.utcnow().isoformat(),
                'message': f'BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(final_matches)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π'
            }
            
            return serialize_for_json(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ: {str(e)}")
            # Retry –ª–æ–≥–∏–∫–∞
            if self.request.retries < self.max_retries:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
                raise self.retry(countdown=60 * (self.request.retries + 1))
            raise


@app.task(
    bind=True, 
    name='tasks.scoring.enhanced_resume_search', 
    max_retries=3, 
    default_retry_delay=60,
    soft_time_limit=900,  # 15 –º–∏–Ω—É—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    time_limit=1080       # 18 –º–∏–Ω—É—Ç
)
def enhanced_resume_search(self, job_id: int, top_k: int = 20, min_similarity: float = 0.4, 
                          use_reranking: bool = True, min_rerank_score: float = 0.5) -> Dict[str, Any]:
    """
    –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–û–ò–°–ö –° BGE-M3 –°–ö–û–†–ò–ù–ì–û–ú: –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ + BGE-M3 Reranker —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –≤ ChromaDB -> —Å–∫–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ BGE-M3 reranker -> —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    Args:
        job_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
        top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        min_similarity: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.4)
        use_reranking: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ BGE-M3 Reranker (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        min_rerank_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π rerank score (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5)
        
    Returns:
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞ BGE-M3
    """
    logger.info(f"üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id} —Å BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥–æ–º")
    
    try:
        # –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –≤ ChromaDB (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç)
        logger.info("üîç –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –≤ ChromaDB...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_task –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        search_task = app.send_task(
            'tasks.matching.find_matching_resumes_for_job',
            args=[job_id, top_k * 2, min_similarity],  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        )
        search_data = search_task.get(timeout=300)
        
        initial_matches = search_data.get('matches', [])
        
        if not initial_matches:
            logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return serialize_for_json({
                'job_id': job_id,
                'job_title': search_data.get('job_title', 'Unknown'),
                'enhanced_matches': [],
                'total_enhanced': 0,
                'workflow': {
                    'step1_search': 'completed',
                    'step2_reranking': 'skipped - no results',
                    'use_reranking': use_reranking,
                    'reranker_model': 'BGE-M3' if use_reranking else None
                },
                'message': '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –≤ ChromaDB –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
            })
        
        # –®–∞–≥ 2: –°–∫–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ BGE-M3 Reranker (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        final_matches = initial_matches
        reranking_stats = {}
        
        if use_reranking:
            logger.info("üéØ –®–∞–≥ 2: –°–∫–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ BGE-M3 Reranker —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏...")
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ run() –º–µ—Ç–æ–¥
            scoring_data = rerank_resume_matches.run(
                job_id,
                initial_matches,
                top_k=top_k,
                min_rerank_score=min_rerank_score
            )
            
            final_matches = scoring_data.get('reranked_matches', initial_matches)
            reranking_stats = scoring_data.get('statistics', {})
            logger.info(f"‚úÖ BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(final_matches)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            logger.info("üîÑ –®–∞–≥ 2: BGE-M3 —Å–∫–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            final_matches = initial_matches[:top_k]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'job_id': job_id,
            'job_title': search_data.get('job_title', 'Unknown'),
            'company_id': search_data.get('company_id'),
            'enhanced_matches': final_matches,
            'total_enhanced': len(final_matches),
            'workflow': {
                'step1_search': 'completed',
                'step2_reranking': 'completed' if use_reranking else 'disabled',
                'use_reranking': use_reranking,
                'reranker_model': 'BGE-M3' if use_reranking else None,
                'data_source': 'ChromaDB embeddings',
                'max_token_length': 8192 if use_reranking else None
            },
            'search_params': {
                'top_k': top_k,
                'min_similarity': min_similarity,
                'min_rerank_score': min_rerank_score if use_reranking else None,
                'uses_embeddings': True
            },
            'comprehensive_statistics': {
                'initial_search': search_data.get('statistics', {}),
                'reranking': reranking_stats,
                'final_count': len(final_matches)
            },
            'processed_at': datetime.utcnow().isoformat(),
            'message': f'–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(final_matches)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (BGE-M3)'
        }
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í PostgreSQL
        if final_matches:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            try:
                logger.info("üíæ –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ BGE-M3 –∞–Ω–∞–ª–∏–∑–∞ –≤ PostgreSQL...")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º send_task –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                session_metadata = {
                    'started_at': datetime.utcnow().isoformat(),
                    'search_type': 'enhanced_resume_search_bge_m3',
                    'task_id': self.request.id if hasattr(self.request, 'id') else None,
                    'reranker_model': 'BGE-M3',
                    'uses_embeddings': True,
                    'max_token_length': 8192
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                save_task = app.send_task(
                    'tasks.analysis_tasks.save_reranker_analysis_results',
                    args=[job_id, result],
                    kwargs={'session_metadata': session_metadata},
                    countdown=2  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
                )
                
                logger.info(f"üì§ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è BGE-M3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞: {save_task.id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result['analysis_saving'] = {
                    'task_id': save_task.id,
                    'status': 'scheduled',
                    'reranker_model': 'BGE-M3',
                    'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã BGE-M3 –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PostgreSQL'
                }
                
            except Exception as save_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ BGE-M3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {save_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                result['analysis_saving'] = {
                    'status': 'failed',
                    'error': str(save_error),
                    'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è BGE-M3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
                }
        
        logger.info(f"üèÜ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Å BGE-M3 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return serialize_for_json(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –ø–æ–∏—Å–∫–µ —Å BGE-M3: {str(e)}")
        # Retry –ª–æ–≥–∏–∫–∞
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))
        raise
