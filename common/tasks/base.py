"""
–ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è Celery –∑–∞–¥–∞—á

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ë–î, retry-–ø–æ–ª–∏—Ç–∏–∫–æ–π, 
—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å–∏—Å—Ç–µ–º—ã.
"""

import logging
from functools import wraps
from typing import Any, Callable, Dict, Optional
from contextlib import contextmanager
from celery.utils.log import get_task_logger
from database.config import database
from tasks.task_utils import serialize_for_json, mask_sensitive_data

logger = get_task_logger(__name__)


@contextmanager
def get_db_session():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤ Celery –∑–∞–¥–∞—á–∞—Ö
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
    - Rollback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - Commit –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    """
    session = database.get_session()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"Database session error: {e}")
        raise
    finally:
        session.close()


def standard_retry_policy(max_retries: int = 3, countdown: int = 60, backoff: float = 2.0):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry –ø–æ–ª–∏—Ç–∏–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
    
    Args:
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
        countdown: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(self, *args, **kwargs):
            try:
                return func(self, *args, **kwargs)
            except Exception as exc:
                if self.request.retries < max_retries:
                    retry_countdown = countdown * (backoff ** self.request.retries)
                    logger.warning(
                        f"Task {self.name} failed, retrying in {retry_countdown}s "
                        f"(attempt {self.request.retries + 1}/{max_retries}): {exc}"
                    )
                    raise self.retry(countdown=retry_countdown, exc=exc)
                else:
                    logger.error(f"Task {self.name} failed after {max_retries} retries: {exc}")
                    raise
        return wrapper
    return decorator


def safe_task(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–∞—Ö
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    """
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        task_name = getattr(self, 'name', func.__name__)
        
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        masked_args = []
        for arg in args:
            if isinstance(arg, str):
                masked_args.append(mask_sensitive_data(arg))
            elif isinstance(arg, dict):
                masked_args.append(mask_sensitive_data(str(arg)))
            else:
                masked_args.append(str(arg)[:100])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        logger.info(f"Task {task_name} started with args: {masked_args}")
        
        try:
            result = func(self, *args, **kwargs)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            serialized_result = serialize_for_json(result)
            
            logger.info(f"Task {task_name} completed successfully")
            return serialized_result
            
        except Exception as e:
            logger.error(f"Task {task_name} failed: {str(e)}")
            raise
    
    return wrapper


def celery_friendly_delay(task_name: str, args: Optional[list] = None, kwargs: Optional[dict] = None, countdown: int = 5):
    """
    Celery-friendly —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤–º–µ—Å—Ç–æ time.sleep()
    
    Args:
        task_name: –ò–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏
        kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏
        countdown: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    from celery import signature
    
    args = args or []
    kwargs = kwargs or {}
    
    return signature(task_name, args=args, kwargs=kwargs).apply_async(countdown=countdown)


def batch_processor(items: list, batch_size: int = 50, delay_between_batches: int = 2):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏ —Å Celery-friendly –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        delay_between_batches: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Yields:
        Tuple[list, bool]: (batch_items, is_last_batch)
    """
    for i in range(0, len(items), batch_size):
        batch = items[i:i + batch_size]
        is_last = (i + batch_size) >= len(items)
        
        yield batch, is_last
        
        # –î–ª—è –≤—Å–µ—Ö –±–∞—Ç—á–µ–π –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ - –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        if not is_last:
            logger.info(f"Processed batch {i//batch_size + 1}, scheduling delay...")


class TaskMetrics:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á
    """
    
    @staticmethod
    def log_task_start(task_name: str, **context):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        logger.info(f"üìä METRIC: Task {task_name} started", extra=context)
    
    @staticmethod
    def log_task_success(task_name: str, duration_seconds: float, **context):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        logger.info(f"üìä METRIC: Task {task_name} completed in {duration_seconds:.2f}s", extra=context)
    
    @staticmethod
    def log_task_failure(task_name: str, error: str, **context):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞—á–µ"""
        logger.error(f"üìä METRIC: Task {task_name} failed: {error}", extra=context)
    
    @staticmethod
    def log_batch_progress(task_name: str, batch_num: int, total_batches: int, processed_items: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π"""
        progress = (batch_num / total_batches) * 100
        logger.info(f"üìä METRIC: {task_name} progress: {progress:.1f}% ({batch_num}/{total_batches} batches, {processed_items} items)")


def monitored_task(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á
    """
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        import time
        
        task_name = getattr(self, 'name', func.__name__)
        start_time = time.time()
        
        TaskMetrics.log_task_start(task_name, task_id=getattr(self.request, 'id', None))
        
        try:
            result = func(self, *args, **kwargs)
            duration = time.time() - start_time
            TaskMetrics.log_task_success(task_name, duration)
            return result
        except Exception as e:
            TaskMetrics.log_task_failure(task_name, str(e))
            raise
    
    return wrapper
