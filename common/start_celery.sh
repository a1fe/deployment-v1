#!/bin/bash
#
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Celery –¥–ª—è HR Analysis (Deployment Version)
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –æ—á–µ—Ä–µ–¥–µ–π
#

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
SERVER_TYPE=""
COMMAND=""

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
while [[ $# -gt 0 ]]; do
    case $1 in
        --server-type=*)
            SERVER_TYPE="${1#*=}"
            shift
            ;;
        --server-type)
            SERVER_TYPE="$2"
            shift 2
            ;;
        start|stop|restart|status|logs|flower)
            COMMAND="$1"
            shift
            ;;
        *)
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–ª–∞–≥ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if [[ -z "$COMMAND" ]]; then
                COMMAND="$1"
            fi
            shift
            ;;
    esac
done

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ)
if [[ -z "$SERVER_TYPE" ]]; then
    SERVER_TYPE="unified"  # –ï–¥–∏–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
fi

echo "üîß –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: $SERVER_TYPE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR="logs"
PID_DIR="pids"
SCRIPT_LOG="${LOG_DIR}/celery_management_${SERVER_TYPE}.log"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${SCRIPT_LOG}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "${LOG_DIR}" "${PID_DIR}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [[ "$VIRTUAL_ENV" == "" ]]; then
    log_message "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!"
    echo "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: source venv/bin/activate"
    exit 1
fi

log_message "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: $VIRTUAL_ENV"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export PYTHONPATH="${PYTHONPATH}:$(pwd)"
export ENVIRONMENT="development"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º development –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
log_message "üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
check_worker_status() {
    local queue=$1
    local pidfile="pids/celery_${queue}.pid"
    
    if [[ -f "$pidfile" ]]; then
        local pid=$(cat "$pidfile")
        if ps -p "$pid" > /dev/null 2>&1; then
            log_message "‚úÖ –í–æ—Ä–∫–µ—Ä ${queue} —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $pid)"
            return 0
        else
            log_message "‚ùå –í–æ—Ä–∫–µ—Ä ${queue} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID: $pid)"
            rm -f "$pidfile"
            return 1
        fi
    else
        log_message "‚ÑπÔ∏è –í–æ—Ä–∫–µ—Ä ${queue} –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
start_worker() {
    local queue=$1
    local concurrency=$2
    local worker_name="worker_${queue}"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    if check_worker_status "$queue"; then
        log_message "‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä $queue —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        return 0
    fi
    
    log_message "üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏: ${queue} (concurrency: ${concurrency})"
    
    celery -A celery_app.celery_app worker \
        --queues="${queue}" \
        --concurrency="${concurrency}" \
        --hostname="${worker_name}@%h" \
        --loglevel=info \
        --logfile="${LOG_DIR}/celery_${queue}.log" \
        --pidfile="${PID_DIR}/celery_${queue}.pid" \
        --detach
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
    sleep 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if check_worker_status "$queue"; then
        log_message "‚úÖ –í–æ—Ä–∫–µ—Ä $queue —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        return 0
    else
        log_message "‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä $queue –º–æ–∂–µ—Ç –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        return 0  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Ç.–∫. –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ beat
start_beat() {
    local pidfile="${PID_DIR}/celery_beat.pid"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    if [[ -f "$pidfile" ]]; then
        local pid=$(cat "$pidfile")
        if ps -p "$pid" > /dev/null 2>&1; then
            log_message "‚ö†Ô∏è Celery Beat —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
            return 0
        else
            log_message "üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª Beat"
            rm -f "$pidfile"
        fi
    fi
    
    log_message "‚è∞ –ó–∞–ø—É—Å–∫ Celery Beat (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)"
    
    celery -A celery_app.celery_app beat \
        --loglevel=info \
        --logfile="${LOG_DIR}/celery_beat.log" \
        --pidfile="$pidfile" \
        --detach
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
    sleep 2
    if [[ -f "$pidfile" ]] && ps -p "$(cat "$pidfile")" > /dev/null 2>&1; then
        log_message "‚úÖ Celery Beat —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        return 0
    else
        log_message "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery Beat"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
stop_all() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Celery –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
    if ls pids/celery_*.pid 1> /dev/null 2>&1; then
        for pidfile in pids/celery_*.pid; do
            if [ -f "$pidfile" ]; then
                pid=$(cat "$pidfile")
                echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}..."
                kill "$pid" 2>/dev/null || echo "–ü—Ä–æ—Ü–µ—Å—Å ${pid} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                rm -f "$pidfile"
            fi
        done
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    pkill -f "celery.*worker" 2>/dev/null || true
    pkill -f "celery.*beat" 2>/dev/null || true
    
    echo "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å Celery –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
    
    if ls pids/celery_*.pid 1> /dev/null 2>&1; then
        for pidfile in pids/celery_*.pid; do
            if [ -f "$pidfile" ]; then
                pid=$(cat "$pidfile")
                queue=$(basename "$pidfile" .pid | sed 's/celery_//')
                if kill -0 "$pid" 2>/dev/null; then
                    echo "‚úÖ ${queue}: —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: ${pid})"
                else
                    echo "‚ùå ${queue}: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª)"
                    rm -f "$pidfile"
                fi
            fi
        done
    else
        echo "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
mkdir -p logs pids

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
case "$COMMAND" in
    "start")
        echo "üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è ${SERVER_TYPE} —Å–µ—Ä–≤–µ—Ä–∞..."
        
        # –ù–æ–≤–∞—è –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π
        start_worker "fillout_processing" 2      # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Fillout API)
        start_worker "text_processing" 2         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤ (—Ä–µ–∑—é–º–µ, –≤–∞–∫–∞–Ω—Å–∏–∏)
        start_worker "embeddings" 2              # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        start_worker "reranking" 1               # AI-—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (concurrency=1 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è OOM)
        start_worker "orchestration" 2           # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (beat)
        start_beat
        
        echo "‚úÖ –í–æ—Ä–∫–µ—Ä—ã ${SERVER_TYPE} —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω—ã!"
        echo "üìù –õ–æ–≥–∏ –≤ –ø–∞–ø–∫–µ: logs/"
        echo "üîß PID —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: pids/"
        ;;
        
    "stop")
        stop_all
        ;;
        
    "restart")
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤..."
        stop_all
        sleep 2
        $0 start
        ;;
        
    "status")
        check_status
        ;;
        
    "logs")
        echo "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        if [ -n "$2" ]; then
            tail -f "logs/celery_${2}.log"
        else
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:"
            ls logs/celery_*.log 2>/dev/null || echo "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"
        fi
        ;;
        
    "flower")
        echo "üå∏ –ó–∞–ø—É—Å–∫ Flower (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Celery)..."
        flower -A celery_app.celery_app --port=5555 --broker=redis://localhost:6379/0
        ;;
        
    *)
        echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs [queue]|flower}"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã"
        echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã"
        echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã"
        echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤"
        echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å)"
        echo "  flower  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        echo ""
        echo "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞):"
        echo "  ‚Ä¢ fillout_processing  - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Fillout API)"
        echo "  ‚Ä¢ text_processing     - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤ (—Ä–µ–∑—é–º–µ, –≤–∞–∫–∞–Ω—Å–∏–∏)"
        echo "  ‚Ä¢ embeddings          - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"
        echo "  ‚Ä¢ reranking           - AI-—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        echo "  ‚Ä¢ orchestration       - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á"
        exit 1
        ;;
esac
